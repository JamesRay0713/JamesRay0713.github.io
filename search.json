[{"title":"一个特价机票的优选工具","path":"/post/flight-ticket-crawler/","content":"在两城市之间，购票平台不同，搜索时间不同，目标时段不同，目标航线不同……机票价格会有很大差别。作为一个打工人，如何高效获取最适合的特价机票呢？ 本文涉及票价时均默认包含燃油和机建费（2023&#x2F;12，标准为￥90+￥50），若有特殊情况会单独说明。 机票工具的设想作为一个普通打工人，对机票价格的要求没有最低只有更低，而每次都要花费好多时间在做机票的攻略上，所以打算做一个简单的机票工具。 该工具的后端是一个Selenium爬虫工具，输入相关搜索条件后，对全平台的机票信息进行爬取和筛选，并存入数据库；其前端类似于携程网页界面的阉割版，可指定时间段、起止城市等搜索条件，执行搜索后可返回一组价格升序排列的机票信息。 该工具的核心是找国内最低票价，所以航司服务的水平、退改签政策的合理性、托运及携行量的大小、境外机场……均不考虑。 该工具的特点是全平台比价、模糊日期搜索、以火车&#x2F;高铁票作为参考基准等。 准备工作相关工具的调研现有的机票比价工具的数据来源于国内外各大OTA(Online Travel Agency Platform)平台、航空公司官网。比价工具自身不是售票平台，选好机票后需要登录到相应的航司&#x2F;OTA进行购买。据知乎高赞用户的回答，有俩主流工具： KAYAK 客涯 特点：国外的，搜索刷新有延迟，界面简洁高级，号称同时搜索数百家旅游网站进行比价，有添加110KM范围的附近机场功能（不含境外）。 经对比测试，相同行程下的机票，有的比国内OTA的价格贵数十至上百元，有的便宜数百元。也许是因为该软件的国外基因，搜索结果更倾向于国外OTA，国内OTA&#x2F;航司的数据不全。 skyscanner 天巡 特点：国外的，搜索刷新稍有延迟，界面简洁高级，有添加附近机场功能（含境外，如深圳宝安附近可包括香港）。另外其网页对机器爬虫的检测更严格。 经对比测试，天巡搜索结果中，国内国外并重。 更多：可加入成为天巡的合作伙伴赚取佣金；它的traval API服务不对无盈利性质的个人开放。 开始设计 要爬取的平台汇总： 平台 对比价格1注1&#x2F;价格2注2 有无网页版来爬取 有无开放api 备注 客涯 ￥605&#x2F;￥605 客涯 ✅有，正在注册审核 天巡 ￥627&#x2F;￥480 天巡 ✅有，但不对个人开放，不过人家给了测试环境的API token：.sh428739766321522266746152871799 携程已收购。反爬严格 美团 ￥432&#x2F;￥432 无 ❌有，但里面没有关于机票的；另有美团企业版API，但苦于没有企业版账号。 京东 ￥940&#x2F;￥540 无 ❌有，但里面没有关于机票的 飞猪 ￥542&#x2F;￥480 飞猪 ❌有，但淘宝账号必须是阿里旅行商家 携程 ￥540&#x2F;￥480 携程 ❌有，但里面没有关于机票的，且账号注册需要公司资质 同程 ￥540&#x2F;￥480 同程 ❌有，没有关于机票的，且账号注册需要特定资质 途牛 ￥542&#x2F;￥540 途牛 ❌有，没有关于机票的，且账号注册需要特定资质 去哪儿 ￥1106&#x2F;￥480 去哪儿 ❌有，注册流程复杂，需要资质 注1：固定航班信息的机票价格对比，2024&#x2F;01&#x2F;04-22:30-00:55成都天府→北京大兴直飞的东航MU6798经济舱； 注2：2024&#x2F;01&#x2F;04 成都天府→北京大兴当天直飞的最低价对比 要考虑的情况 附近机场搜索功能要扩大范围，如成都市，不仅要包含双流、天府，还要包含绵阳、南充、宜宾、泸州等。这需要维护一个全国民航机场距离矩阵。 选择了附近机场，则要同时考虑起点-&gt;出发机场和到达机场-&gt;终点等路线的通勤价格、通勤时间的可行性。 不同平台的爬虫难度有高低，特别是美团、京东没有网页。 单程、往返的都要爬。 同一个航班信息搜索滞留久了，平台可能出现改价杀熟行为，这个无解。","tags":["爬虫"],"categories":["life"]},{"title":"手册：debug","path":"/post/manual-debug/","content":"平时遇到的各种bug及解决办法收录。 python相关调试场景 [UI] 带参数的调试：直接在launch.json中加入键值对：&quot;args&quot;: [ &quot;--arg1&quot;, &quot;val1&quot;, &quot;--arg2&quot;, &quot;val2&quot;, ] docker相关命令相关`docker login`命令的报错环境：wsl2, docker重现：执行docker login报错：Error saving credentials: error storing credentials err: exec: &quot;docker-credential-desktop.exe&quot;: executable file not found in $PATH, out: &#x27;&#x27;原因：旧的Docker 凭据产生了冲突，清除掉，重新登录即可。解决：rm ~/.docker/config.jsondocker logoutdocker login连接docker守护进程被拒环境：wsl2, docker重现：执行docker run ...报错：docker: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create&quot;: dial unix /var/run/docker.sock: connect: permission denied.原因：你的用户（james）没有足够的权限连接到 Docker 守护进程。通常情况下，这是因为用户没有加入 docker 组解决：sudo usermod -aG docker $USER # 入组newgrp docker # 重载筛选评论最多的3条建议环境：wsl2, docker重现：执行docker run ...报错：docker: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create&quot;: dial unix /var/run/docker.sock: connect: permission denied.原因：你的用户（james）没有足够的权限连接到 Docker 守护进程。通常情况下，这是因为用户没有加入 docker 组解决：sudo usermod -aG docker $USER # 入组 newgrp docker # 重载 Linux相关ssh相关 当连接远程失败、连接重置： 先考虑服务端的ssh服务是否开启：sudo service ssh status/start 当无法锁定问题，用-v参数查看详细信息。","tags":["debug"],"categories":["debug"]},{"title":"手册：搭建博客网站","path":"/post/manual-build-website/","content":"从0-1, 基于hexo+ stellar+ vercel搭建博客所涉及到的方方面。 博客构思我们想要做出一个什么样的个人博客？应该是能满足记录生活、学习笔记、bug收录、项目展示、产品推广、个人简历、朋友互动等等，最主要是简单易上手且方便部署。为此选择了Hexo。 环境准备 win10系统，终端用powershell或git-bash均可。 确认git可正常访问github, 有问题请参考。 安装有nvm，并以此安装了与stellar匹配的nodejs版本。验证安装成功: node -v, npm -v。 全局安装了hexo博客工具：npm install -g hexo-cli。 造一个博客源码仓库~&nbsp;如果你只想在本地搭建博客，没有远程管理及迁移的需求，可跳过该节。 在github&#x2F;gitee新建私有仓库blog-source, 克隆到本地; 进入blog-source目录，制作.gitignore: .DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/_multiconfig.yml 然后进行下节的博客搭建工作。 当需要上传博客源码时：git add --all &amp;&amp; git commit -m &quot;update&quot; &amp;&amp; git push origin main。 如果是gitee, main要换成master 本地搭建 造目录： 创建空的博客工程目录 blog-source，如果是git克隆而来则直接进入目录。 搭框架： 如果是从零开始，则先把目录所有内容移出去，后用命令hexo init来初始化得到博客框架； 如果已有博客，想移植其他主题，则建议按需移植以下目录&#x2F;文件过来：- scaffolds/ # 模版- source/ # 各种文章内容、资源 - themes/ # 主题- _config.yml # 配置文件- _config.theme.yml- package.json... 为什么不整个移植过来呢？因为其他目录&#x2F;文件都是通过上述目录&#x2F;文件生成的，保证了移植时的轻量化。 装软件：安装‘package.json’中的npm依赖，执行npm install。 配主题: 如果对`stellar`主题功能更新没有兴趣，直接安装稳定版：npm i hexo-theme-stellar 如果想跟随`stellar`作者的更新脚步，则克隆他的主题仓库， 若当前目录下有`.git&#x2F;`，那就用（仓库套仓库）： 若没有，那就用： 如果想时时更新，还有自定义需求，那就fork他的仓库到自己的GitHub，然后用上面的clone或submodule add命令即可； 然后在_config.yml中修改：theme: stellar。 以后如果主题有更新，则进入`themes&#x2F;stellar&#x2F;`,执行git pull。 DIY主题： 先将主题目录下的config文件复制到根目录下，使得hexo可用： 然后可选择进一步根据教程设计自己的网站。 写文章：此刻你已经可以创建、修改、部署博客到本地了，常用命令有 hexo new post [title] (新建文章)hexo clean &amp;&amp; hexo g &amp;&amp; hexo s (清缓存、生成网页、本地部署) 主题手册是对stellar教程文档中大量内置标签用法的总结，用以辅助写文章。我也将时刻关注主题版本的升级，每次升级的内容都要同步添加到我的主题手册中。 部署博客到互联网最简单快捷：部署到GitHub&#x2F;Gitee 新建公有仓库，存放我们的输出的网页静态文件（即hexo g命令后生成的/public/文件夹） 仓库名有讲究：GitHub应为用户名.github.io; Gitee应为用户名 将仓库加入配置./_config.ymldeploy:- type: git repo: git@gitee.com:jamesray0713/jamesray0713.git branch: master message: &quot;update&quot;- type: git repo: https://github.com/JamesRay0713/JamesRay0713.github.io.git branch: gh-pages message: &quot;update&quot; 注意GitHub和gitee两者branch的区别 下载部署工具: npm i hexo-deployer-git 执行部署：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 仓库开启服务githubgitee在仓库的Settings设置中找到Pages选项卡，设置Source和Branch为如下图所示： 此时，我们得到了域名user.github.io。在仓库的服务下拉中找到Gitee Pages选项卡，可以什么都不要动，只需点击更新即可。此时，我们得到了域名user.gitee.io。 更好的部署：购买域名+ vercel部署Vercel可以获得更快的访问速度，但在大陆地区vercel.app和github.io均被运营商进行了DNS污染，无法直接访问。因此需要购买域名。 准备域名： 购买域名: 我在腾讯云上买了taddream.site，有效期10年，￥175，挺实惠的。 备案域名:需要备案的场景：你的存放静态文件的服务器在国内，我目前托管在vercel完全没必要的。如果你的网站有很大的访问流量，建议把服务器搬到国内。这里服务器有两种情况： 购买的云服务器：按照官方教程走即可 自己的实体服务器：该情况下备案审核要求很繁琐（特别是腾讯云），而且需要有营业执照+ 备案授权码 营业执照那里需填写法人身份信息；授权码可以去淘宝搜腾讯 授权码，10块左右。 设置DNS解析：在云服务商的域名DNS解析中增加2条CNAME 解析, 主机记录分别是@、www： 主机记录 记录类型 记录值 TTL 解析请求来源(isp) @ CNAME cname.vercel-dns.com 10分钟 默认 获取免费SSL证书，一年一签。 vercel.com部署：用GitHub账号登录，Add New... -&gt; Project, 导入我们的静态文件仓库（username.github.io）。输入projectName，这直接关系到三级域名的名字，点击部署。修改分支：因为我们的博客静态文件存在了gh-pages分支，所以在当前vercel项目中依次点击settings -&gt; git -&gt; Production Branch, 输入gh-pages即可。 分支不会立即生效，需再次用hexo d将静态文件部署上传后，这里才能自动更改。此时，我们得到了新域名taddream.vercel.app(国内不可访问)。 绑定域名：在当前vercel项目中依次点击settings -&gt; Domains -&gt; Production Branch, 填入我的域名taddream.site 修改博客配置文件, 修改之后需等待重新部署后生效： ./_config.ymlurl: https://taddream.site github自动化部署(TODO)TODO：　https://hexo.io/zh-cn/docs/github-pages 借助GitHub Actions实现自动化。我们无需再负责维护user.github.io仓库, 只需push好源码仓库即可。 gitee无自动化功能，考虑放弃gitee部署这条路。 我们直接在本地源码仓库目录的.github/workflows/下创建配置文件(即自动化脚本)，如下：.github/workflows/auto-deploy.ymlname: auto deployon: workflow_dispatch: # 手动触发 push: # push代码时触发jobs: build: runs-on: ubuntu-latest # 运行环境为最新版 Ubuntu name: auto deploy steps: # 1. 获取源码 - name: Checkout uses: actions/checkout@v3 # 使用 actions/checkout@v3 with: # 条件 submodules: true # Checkout private submodules(themes or something else). 当有子模块时切换分支？ # 2. 配置环境 - name: Setup Node.js 18.12.x uses: actions/setup-node@master with: node-version: &quot;18.12.x&quot; # 3. 生成静态文件 - name: Generate Public Files run: | npm i npm install hexo-cli -g hexo clean &amp;&amp; hexo generate # 4. 部署到 GitHub 仓库（可选） - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: deploy_key: $&#123;&#123; secrets.DEPLOY_KEY &#125;&#125; external_repository: JamesRay0713/JamesRay0713.github.io publish_branch: gh-pages publish_dir: ./public commit_message: $&#123;&#123; github.event.head_commit.message &#125;&#125; user_name: &#x27;github-actions[bot]&#x27; user_email: &#x27;github-actions[bot]@users.noreply.github.com&#x27; # 5. 部署到服务器（可选） - name: Deploy to Server uses: easingthemes/ssh-deploy@v3 env: SSH_PRIVATE_KEY: $&#123;&#123; secrets.SERVER_SSH_KEY &#125;&#125; ARGS: &quot;-rltgoDzvO --delete&quot; EXCLUDE: &quot;.well-known, .user.ini&quot; SOURCE: public/ REMOTE_HOST: $&#123;&#123; secrets.REMOTE_HOST &#125;&#125; REMOTE_PORT: $&#123;&#123; secrets.REMOTE_PORT &#125;&#125; REMOTE_USER: $&#123;&#123; secrets.REMOTE_USER &#125;&#125; TARGET: $&#123;&#123; secrets.TARGET &#125;&#125; 选择仅部署GitHub时，只需修改其中external_repository为自己的博客静态文件仓库 配置公私钥，用于’Action的虚拟机(客户端，私钥)’同’静态文件仓库(服务端，公钥)’的通信： 准备一对公私钥(方法) 放置公钥：进入external_repository→ settings→ Deploy keys→ Add Deploy key 更高级部署：用自己的服务器略，以后探索。参考：https://zhuanlan.zhihu.com/p/120743882https://zhuanlan.zhihu.com/p/120743882 更多请移步","tags":["博客"],"categories":["博客"]},{"title":"手册：管理hexo-stellar博客","path":"/post/manual-manage-blog/","content":"这里归纳总结了使用Hexo + stellar的使用教程，作平时维护博客网站之用。另外要常关注框架&#x2F;主题的迭代。 注意！！！ Tag Plugins说明 Hexos说，markdown语法不能包裹标签插件。但是我测试，是可以的。如：有色的链接 反过来，有的标签插件能包裹markdown语法，有的却不能正确渲染。如行内的标签插件：在绿字中加[一个链接](/assets/build_site_images/备选头像2.png) 拓展：可考虑直接写入HTML代码，如：&lt;a href=&quot;http://example.com/&quot;&gt;一个链接&lt;/a&gt; 所有的标签插件的语法中: 用空格分隔多个参数（当需要真正的空格，请使用&amp;nbsp;代替）；用方括号表示可选参数；用冒号分隔键值对参数（无空格）。 本文的路径格式：除非特殊说明，以/开头的，就是/public/下的相对路径。其他开头的就是工作目录绝对路径。 注意：Hexo框架、stellar主题有新的迭代时，本文也要及时更新。 更新历史2023&#x2F;12&#x2F;24 ： Hexo-v7.0.0，stellar-v1.21.0 Hexo框架常用命令参考 写作 hexo new post &quot;title1&quot;: 会在/source/_posts下创建title1.md; hexo new page title2 -p dir1/dir2/filename: 会在/source/下创建title2.md; 基础配置 配置优先级：_config.yml的theme_config属性 -&gt; _config.[theme].yml -&gt; _config.yml。 文章里：front-matter配置这里的配置直接定义本页的装修风格，且能覆盖全局配置文件_config。这里只介绍部分参数： layout: post类型和自定义类型，存入source/_posts; page类型，存入source/。 comments：是否可用bool（TODO） categories: Hexo不支持多个同级分类，解决办法 文章里: 标签插件 标签插件（Tag Plugins）不应该被包裹在 Markdown 语法中。 引用块 blockquote&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125; Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 更简单的引用块，&gt; content 代码块 codeblock或code&#123;% codeblock [title] [lang:language] [url] [link text] [additional options:value] %&#125;code snippet&#123;% endcodeblock %&#125;其中，额外选项有：line_number:true ; line_threshold:0 ; highlight:true ; first_line:1 ; mark:1,4-7,10。 用in更优雅python小技巧1234num = 1if num in(1,3,5): type = &#x27;奇数&#x27;print(type) 更简单的代码块，用反引号：``` [language] [title] [url] [link text] code snippet ``` 自己的代码资源嵌入 include_code&#123;% include_code [title] [lang:language] [from:line] [to:line] path/to/file %&#125; 这里path/to/file的根目录是source/downloads/code。 tag-embed式代码、视频嵌入需要事先安装hexo-tag-embed插件：npm i hexo-tag-embed Gist的代码块嵌入：&#123;% gist gist_id [filename] %&#125; jsfiddle的前端代码块嵌入：&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125; vimeo视频嵌入：&#123;% vimeo video_id [width] [height] %&#125; YouTube视频嵌入：&#123;% youtube video_id [type] [cookie] %&#125; 避免渲染的块 rawcontent {% mark 在绿字中加一个[链接](/assets/build_site_images/备选头像2.png) color:green %} 更好用的视频嵌入 iframe iframe标签，美观度一般：&#123;% iframe url [width] [height] %&#125; 直接上HTML代码：更复杂、更定制化的视频嵌入&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=566104739&amp;bvid=BV1Tv4y1r7ZG&amp;cid=985684333&amp;page=1&amp;autoplay=0&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; class=&quot;bilibili-video&quot; style=&quot;width:100%;min-height:315px&quot;&gt; &lt;/iframe&gt; 图片嵌入 img&#123;% img [class names] /path/to/image [width] [height] '\"title text\" \"alt text\"' %&#125; 我的评价：markdown格式更简洁：[](url)，或者stellar的更好。 链接嵌入 link&#123;% link text url [external] [title] %&#125; https://hexo.io/zh-cn/docs 标题https://taddream.site/hexo%E6%96%87%E6%A1%A3 我的评价：不如stellar的。 assets目录下的资源嵌入站内图片、文件的更定制化的、路径简单化的嵌入方式，但我就只用markdown。 引用自己post目录下的文章 post_link&#123;% post_path filename %&#125;，&#123;% post_link filename [title] [escape] %&#125;(title默认是filename；escape默认要转义，即true)如：debug手册 优点：在使用此标签时可以忽略文章文件所在的路径或者文章的永久链接信息、如语言、日期。我的评价：不如markdown语法方便，[标题](/post/文件名) 功能扩展 想自定义小功能：编写JS脚本，放进/scripts/下即可; 想探索更多功能：插件商店 stellar主题基础配置所有配置直接见/_config.yml和/_config.stellar.yml，里面有详细备注和解释。下面只挑一些来讲。 自定义小组件 主题内置了8个组件布局 实现组件2步骤: 【配置】：依托现有组件布局，在_data/widgets.yml中声明各种自定义的组件； 【使用】：在/_config.stellar.yml的sidebar.widgets中调用组件名；或文章的front matter的sidebar中覆盖组件名&#x2F;组件配置。 文章里：front-matter配置直接见scaffolds/post.md，里面有详细备注和解释。 文章里：标签插件表达类标签01-emoji已配置的库有：qq, twemoji, aru, tieba, blobcat(主题自带v1版), bbpng和bbgif(主题自带v2版) 语法和示例：&#123;% emoji [source] name [height:1.75em] %&#125;&#123;% emoji 爱你 %&#125;&#123;% emoji blobcat ablobcatrainbow %&#125;&#123;% emoji blobcat ablobcatrainbow height:4em %&#125;&#123;% emoji blobcat ablobcatattentionreverse %&#125;&#123;% emoji tieba 滑稽 %&#125; 效果： 02- mark 行内文本标记，仅12种 语法和示例：&#123;% mark 默认 %&#125; &#123;% mark 红 color:red %&#125; &#123;% mark 橙 color:orange %&#125; &#123;% mark 黄 color:yellow %&#125; &#123;% mark 绿 color:green %&#125; &#123;% mark 青 color:cyan %&#125; &#123;% mark 蓝 color:blue %&#125; &#123;% mark 紫 color:purple %&#125; &#123;% mark 浅 color:light %&#125; &#123;% mark 深 color:dark %&#125; &#123;% mark 警告 color:warning %&#125; &#123;% mark 错误 color:error %&#125; 效果：默认 红 橙 黄 绿 青 蓝 紫 浅 深 警告 错误 03- hashtag 标签类似mark标签，但其文本是自定义的，还可带链接 语法：&#123;% hashtag 文本 url %&#125; 效果：Stellar Hexo GitHub Gitea 04- image 图片标签 语法：&#123;% image src [description] [download:bool/string] [width:px] [padding:px] [bg:hex] %&#125;## 谨记，键值对间不要有空格src: 图片地址description: 图片描述download:href # 下载地址，设置此值后鼠标放在图片上会显示下载地址，如果下载地址为图片地址，可以设置为 truewidth:200px # 图片宽度padding:16px # 图片四周填充宽度bg:&#x27;#ffffff&#x27; # 图片区域背景颜色，16进制; 或用`white`等；或用动态配色`var(--card)` 效果：来自unsplash 的大海图集 来自unsplash 的森林图集 05- quot 引用（标题式的） 跟Hexo中的quote不是一个东西。用于居中醒目表示。其中el参数可使其变为居中的标题；icon参数的值在/_config.yml的tag_plugins.quot中配置 语法：&#123;% quot 内容 [icon:default/hashtag] [el:h2] %&#125; 效果：Stellar 是最好用的主题 热门话题 06- poetry 诗词 语法：&#123;% poetry 游山西村 author:陆游 footer:诗词节选 %&#125;莫笑农家腊酒浑，丰年留客足鸡豚。**山重水复疑无路，柳暗花明又一村。**&#123;% endpoetry %&#125; 效果：游山西村陆游莫笑农家腊酒浑，丰年留客足鸡豚。山重水复疑无路，柳暗花明又一村。诗词节选 07- note 备注块 语法：&#123;% note [title] content [color:red/orange/yellow/green/cyan/blue/purple/light/dark/warning/error] %&#125; 如果标题中需要显示空格，请使用&amp;nbsp;代替 效果：这&nbsp;是标题这是正文 哈哈。 这是正文哈哈。 08- link 链接卡片 语法：&#123;% link href [title] [icon:src] [desc:true/false] %&#125; 效果:不带摘要的样式：https://xaoxuu.com/blog/20221029/https://xaoxuu.com/blog/20221029/ 带摘要的样式：https://xaoxuu.com/blog/20221029/https://xaoxuu.com/blog/20221029/ 09- mermaid 图表 学习研究 https://mermaid.js.org/intro/ 安装插件：npm install --save hexo-filter-mermaid-diagrams 示例：#```mermaidgraph LRA(Section A) --&gt;|option 1| B(Section A)B --&gt;|option 2| C(Section C)#``` 效果:graph LRA(Section A) --&gt;|option 1| B(Section A)B --&gt;|option 2| C(Section C) 10- copy 复制行 语法：&#123;% copy [width:max/...] [git:ssh/gh/https] 内容 %&#125; 当有git参数时，内容只需输入域名+仓库名 效果： 11- radio 单选框 语法：&#123;% radio [checked:true/false] [color:red/orange/yellow/green/cyan/blue/purple] 框后的文字 %&#125; 效果：没有勾选的单选框 已勾选的单选框 12- checkbox 复选 语法：&#123;% checkbox [symbol:plus/minus/times] [color:red/orange/yellow/green/cyan/blue/purple] [checked:true/false] 框后的文字 %&#125; 效果:文字 13- navbar 导航栏（文章内的） 语法：&#123;% navbar active:/path [按钮名]() ... %&#125; active 参数用于指定高亮 效果：文章项目留言GitHub 14- frame 设备框架（不咋懂，不常用） 语法：&#123;% frame iphone11 img:/assets/wiki/prohud/toast/demo-loading.png video:/assets/wiki/prohud/toast/demo-loading.mp4 focus:top %&#125; 效果： 15- 文本修饰标签集 &#123;% psw 密码 %&#125; : 这是 密码 标签 &#123;% u 下划线 %&#125; : 这是 下划线 标签 &#123;% emp 着重号 %&#125; : 这是 着重号 标签 &#123;% wavy 波浪线 %&#125; : 这是 波浪线 标签 &#123;% del 删除线 %&#125; : 这是 删除线 标签 &#123;% sup 上角标 color:red %&#125; : 这是 上角标 标签 &#123;% sub 下角标 %&#125; : 这是 下角标 标签 &#123;% kbd 键盘样式 %&#125; : 这是 键盘样式 标签，试一试：⌘ + D 16- 目标管理（Objectives and Key Results）形象展示一个目标下多个关键点的进度。 示例写法 O1 2024年的小目标：完成 Volantis 6.0 并发布上线 来自2025年的复盘：已《基本》实现目标 正常 44% KR1 重构 tag-plugins 和 wiki 系统 当 KR 进度为 100% 时，标签默认显示为 已完成当 KR 未设置进度时，默认为 0%当 O 未设置进度时，则显示所有 KR 进度平均值 已完成 100% KR2 完成主要页面设计稿 小提示1小提示2您可以在 _config.yml 文件中修改标签的颜色和文案您可以在 _config.yml 文件中增加任意的标签配置 延期 90% KR3 完成前置准备工作（如果你知道答案，请在留言区帮帮我！🥹） 在咸水和海滩之间找一亩地求出圆周率后15位找出宇宙的终极逻辑去地狱里走两步 未完成 -12% KR-4 开发、测试和发布 站点头像 风险 0% &#123;% okr o1 %&#125;2024年的小目标：完成 Volantis 6.0 并发布上线来自2025年的复盘：已《基本》实现目标 &#123;% emoji tieba 滑稽 %&#125;&lt;!-- okr kr1 percent:1 --&gt;重构 tag-plugins 和 wiki 系统- 当 &#123;% mark KR %&#125; 进度为 100% 时，标签默认显示为 &#123;% mark color:green 已完成 %&#125;- 当 &#123;% mark KR %&#125; 未设置进度时，默认为 &#123;% mark 0% %&#125;- 当 &#123;% mark O %&#125; 未设置进度时，则显示所有 &#123;% mark KR %&#125; 进度平均值&lt;!-- okr kr2 percent:0.9 status:off_track --&gt;完成主要页面设计稿&#123;% tabs align:left %&#125;&lt;!-- tab 小提示1 --&gt;您可以在 _config.yml 文件中修改标签的颜色和文案&lt;!-- tab 小提示2 --&gt;您可以在 _config.yml 文件中增加任意的标签配置&#123;% endtabs %&#125;&lt;!-- okr kr3 percent:-0.12 status:unfinished --&gt;完成前置准备工作（如果你知道答案，请在留言区帮帮我！🥹）&#123;% checkbox 在咸水和海滩之间找一亩地 %&#125;&#123;% checkbox 求出圆周率后15位 %&#125;&#123;% checkbox 找出宇宙的终极逻辑 %&#125;&#123;% checkbox 去地狱里走两步 %&#125;&lt;!-- okr kr-4 status:at_risk --&gt;开发、测试和发布&#123;% image /assets/wiki/stellar/icon.svg height:64px 支持嵌套插入图片等其它简单组件 %&#125;&#123;% endokr %&#125; 数据集合类标签（5个）timeline 时间线静态时间线 场景1– 制作教程&#x2F;日程 示例：&#123;% timeline %&#125;&lt;!-- node 第一步：打开 GitHub --&gt;打开 [Stellar](https://github.com/xaoxuu/hexo-theme-stellar/) 的 GitHub 页面。&lt;!-- node 第二步：点击 Star --&gt;如果发现右上角的 Star 还没点亮，就点亮它！&#123;% endtimeline %&#125; 效果：第一步：打开 GitHub打开 Stellar 的 GitHub 页面。第二步：点击 Star如果发现右上角的 Star 还没点亮，就点亮它！ 动态时间线 场景2：显示某人GitHub Issues的动态说说 示例：&#123;% timeline api:https://api.github.com/repos/JamesRay0713/blog-comments/issues?direction=asc&amp;per_page=3 %&#125;&#123;% endtimeline %&#125; 效果： 场景3：显示友链朋友圈 TODO教程：https://xaoxuu.com/wiki/stellar/fcircle/。 2023&#x2F;11&#x2F;23尝试教程：后端、极简两个方法都失败&#123;% timeline type:fcircle api:https://raw.github.xaox.cc/xaoxuu/friends-rss-generator/output/data.json %&#125;&#123;% endtimeline %&#125; 场景4：爬取微博动态 TODO fork 爬虫仓库 ，修改自己的仓库名 修改 .github&#x2F;workflows&#x2F;main.yml 中的微博ID为你想爬取的ID，修改完后每天会自动爬取你的微博，存储为 json 文件，输出文件在 output 分支 &#123;% timeline limit:20 type:weibo api:你的json文件地址 %&#125;&#123;% endtimeline %&#125; 静态+动态 即在动态代码中间插入静态节点，示例：&#123;% timeline reversed:true api:https://api.github.com/repos/xaoxuu/blog-timeline/issues?per_page=2 %&#125;&lt;!-- node 这条内容为静态数据 --&gt;这条内容为静态数据，静态数据在 `deploy` 时就已经确定了。&#123;% endtimeline %&#125; 效果：这条内容为静态数据这条内容为静态数据，静态数据在 deploy 时就已经确定了。 对时间线内容做筛选 TODO筛选方式：可在标签代码中增加参数（如user:xaoxuu），也可在api的值中增加参数（如?labels&#x3D;todo&amp;per_page&#x3D;3）更多用法详见：https://docs.github.com/en/rest/issues/issues#list-issues-assigned-to-the-authenticated-user 示例：&#123;% folders %&#125;&lt;!-- folder 只显示某个人的数据 --&gt;&#123;% timeline user:xaoxuu api:https://api.github.com/repos/volantis-x/hexo-theme-volantis/issues %&#125;&#123;% endtimeline %&#125;&lt;!-- folder 筛选最近3条todo --&gt;&#123;% timeline api:https://api.github.com/repos/xaoxuu/hexo-theme-stellar/issues?labels=todo&amp;per_page=3 %&#125;&#123;% endtimeline %&#125;&lt;!-- folder 筛选评论最多的3条建议 --&gt;&#123;% timeline api:https://api.github.com/repos/volantis-x/hexo-theme-volantis/issues?labels=feature-request&amp;per_page=3&amp;sort=comments %&#125;&#123;% endtimeline %&#125;&#123;% endfolders %&#125; 效果：只显示某个人的数据筛选最近3条todo筛选评论最多的3条建议 friends 友链 静态友链：先在source/_data/links.yml中添加友链信息, 后可以在任何位置插入友链组示例：&#123;% friends 开源大佬 %&#125;效果：尹寒磊Justin Yang执着_7748Woooodi枋柚梓MHuiGColsrchChrAlpha 的幻想乡小冰博客 动态友链:（有空再学）&#123;% friends api:https://raw.github.xaox.cc/xaoxuu/friends/output/v2/data.json %&#125; sites 网站卡片 实现方法：先在source/_data/links.yml中添加网站信息, 后可以在任何位置插入网站卡片示例：&#123;% sites 分组名 %&#125;效果：taurihttps://tauri.app/Wailshttps://wails.io/Electronhttps://www.electronjs.org/Nw.jshttps://nwjs.io/Flutter for Desktophttps://flutter.dev/multi-platform/desktop ghcard 卡片 示例：&#123;% ghcard 用户名 %&#125;或&#123;% ghcard 用户名/仓库名 theme:dark %&#125; 效果： toc 文档目录树实现了把一个wiki文档的目录放到任何一个地方。相关配置：source/_data/widgets.yml中也有toc组件，可在source/_config.stellar.yml中配置到sidebar中。 语法：&#123;% toc wiki:xxx [open:true] [display:mobile] title %&#125; 效果：mangrove的目录红树林正射影像目标检测 容器类标签（9个）box 普通块、代码块容器 语法：&#123;% box [title] [color:color] [child:codeblock/tabs] %&#125;内容&#123;% endbox %&#125; 效果1：child参数为空——和note功能类似 注：stellar的note标签插件，就是基于box的。 Stellar v1.12.0因为原 noteblock 标签在升级到 hexo 6.0 之后跟官方库冲突了 。。。 源码：&#123;% box Stellar v1.12.0 color:warning %&#125;因为原 noteblock 标签在升级到 hexo 6.0 之后跟官方库冲突了 。。。&#123;% endbox %&#125; 效果2：child参数为codeblock——和Hexo的code功能重复 注：优劣对比，box更美观；code配置参数更多。 /path/to/codefunc test() &#123; // ...&#125; 源码： &#123;% box /path/to/code child:codeblock color:green %&#125; \\`\\`\\`swift func test() &#123; // ... &#125; \\`\\`\\` &#123;% endbox %&#125; 效果3：child参数为tabs——里面就可以嵌套一个tabs标签插件 图文混排示例代码个人电脑作为办公设备时，我们该如何保护隐私？公司一般都会强制安装安防软件，这些软件要求开机自启动，要求有屏幕录制权限、完全的磁盘访问权限包括相册图库。因此如果使用自己的 MacBook 作为办公设备，必须要把生活区和工作区完全独立开，安装在两个磁盘分区，并且对磁盘分区进行加密。 folding 折叠容器 快速复制：&#123;% folding open:false color:green 标题 %&#125;content&#123;% endfolding %&#125; 语法：&#123;% folding title [child:codeblock/...] [open:bool] [color:red/orange/yellow/green/cyan/blue/purple/light/dark] %&#125;content&#123;% endfolding %&#125; v1.21.0中，child:codeblock/...改成了codeblock:true/false 效果1– 彩色可折叠代码块： 默认打开的代码折叠框func test() &#123; // ...&#125; 效果2– 嵌套折叠容器 警告1…警告2…警告3ok folders 多个折叠容器聚合 语法：&#123;% folders %&#125;&lt;!-- folder 题目1 --&gt;这是答案1&lt;!-- folder 题目2 --&gt;这是答案2&lt;!-- folder 题目3 --&gt;这是答案3&#123;% endfolders %&#125; 效果：题目1这是答案1题目2这是答案2题目3这是答案3 tabs 分栏容器 示例：&#123;% tabs active:2 align:center %&#125;&lt;!-- tab 图片 --&gt;&#123;% image /assets/build_site_images/网站图标2.png width:300px %&#125;&lt;!-- tab 代码块 --&gt;#```swiftprint(&quot;hello world&quot;)#```&#123;% endtabs %&#125; 效果：图片代码块表格let x = 123print(&quot;hello world&quot;) grid 网格分区容器 语法：目前只支持显示一行两列，且手机端因宽度较窄会恢复为单列显示。&#123;% grid [bg:block/card] %&#125;&lt;!-- cell left --&gt;&lt;center&gt;左侧内容&lt;/center&gt;&lt;!-- cell right --&gt;&lt;center&gt;右侧内容&lt;/center&gt;&#123;% endgrid %&#125; 三种背景模式：默认无；普通型block；卡片型card。上面的&lt;center&gt;可以不要。 示例： Unsplash Photo The Galactic Center is the rotational center of the Milky Way galaxy. Its central massive object is a supermassive black hole of about 4 million solar masses, which is called Sagittarius A*. Ōwhiro Bay, Wellington, New ZealandPublished on May 31, 2022SONY, ILCE-6000Free to use under the Unsplash License gallery 图库容器图片引入格式只支持md语法。默认配置可前往theme-config的：tag_plugins.gallery。 TODO：运行不成功，改日再看。 &#123;% gallery %&#125;&#123;% image https://images.unsplash.com/photo-1688142202243-e218ad203952?w=800&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHx0b3BpYy1mZWVkfDYzfEZ6bzN6dU9ITjZ3fHxlbnwwfHx8fHw%3D %&#125;&#123;% image https://images.unsplash.com/photo-1700994630045-f7a20df6d92e?w=800&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwcm9maWxlLXBhZ2V8MjN8fHxlbnwwfHx8fHw%3D %&#125;&#123;% image https://images.unsplash.com/photo-1533274221104-015a584a1005?w=800&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHx0b3BpYy1mZWVkfDE4fGJvOGpRS1RhRTBZfHxlbnwwfHx8fHw%3D %&#125;&#123;% image https://images.unsplash.com/photo-1539604214100-ab860d9082e0?w=800&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHx0b3BpYy1mZWVkfDIxfGJvOGpRS1RhRTBZfHxlbnwwfHx8fHw%3D %&#125;&#123;% image https://images.unsplash.com/photo-1698843848092-588f9c1bb0bd?w=800&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwcm9maWxlLXBhZ2V8Mzh8fHxlbnwwfHx8fHw%3D %&#125;&#123;% image https://images.unsplash.com/photo-1516571748831-5d81767b788d?q=80&amp;w=2574&amp;auto=format&amp;fit=crop&amp;ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D %&#125;&#123;% endgallery %&#125; banner 横幅容器将取代about容器。 用法1：独立页面的横幅，内部可以套一个导航栏。 &#123;% banner 标题 bg:背景图片路径 %&#125;&#123;% navbar active:/wiki/ [文章](/post/) [项目](/wiki/) %&#125;&#123;% endbanner %&#125; 文章项目随记 用法2：个人资料页的横幅，可以加一个头像 &#123;% banner 某某 这是个人简介 avatar:/path.png bg:/path.jpg %&#125;&#123;% endbanner %&#125; James Raythis is my private page. 用法3：对link链接卡片的美化 &#123;% banner 标题 摘要。 bg:路径或url link:路径或url %&#125;&#123;% endbanner %&#125; 博客进阶：自动化部署本文讲了如何利用脚本和 GitHub Actions 简化博客搭建和部署流程，提高效率。 about 关于块容器略，将废弃 swiper 轮播容器 语法：(这里url有两种形式：md或tag-plugin)&#123;% swiper [effect:cards/coverflow] [width:min/max] %&#125;\\!\\[\\](url)&#123;% image url width:300px %&#125;...&#123;% endswiper %&#125; 效果: wiki文档专题顺利上架一个完整的wiki项目需要几步？我们先看一个项目需要的文件结构。 目录树source/ # ├── _data/│ ├── wiki/ # step1: 该目录下，一个项目配置一个文件│ │ ├── `proj1-ID.yml`│ │ └── proj2-ID.yml│ ├── `wiki.yml` # step3: 陈列其中的项目ID表示上架了│ └── other.yml├── wiki/ # 项目目录│ ├── proj1/ # step2: 写项目│ │ ├── `index.md`│ │ ├── page1.md│ │ └── pageN.md│ ├── proj2/│ └── projN/ ├── assets/ # 存放项目中链接的一些资源└── ... step1: 构建配置文件配置模板：/_data/wiki/proj1-ID.yml# 该文件用于配置一个具体的wiki项目。# 该文件名、项目ID，这两者必须相同。项目ID要陈列于`/_data/wiki.yml`中才能使项目出现在`/wiki/`的列表中，不陈列则隐身。# 项目ID、下面的name、/wiki/下的项目文件夹名，这三者不必相同。# 2023/12/24测试：logo, license, share, path，它们的有无对配置完全不起作用！为什么########## 必有的 ###########name: 笔记本 # 项目页面左上角的大标题、正上方的路径尾巴subtitle: &quot;每天一点，进步一点 | up up up~&quot; # 项目页面左上角的副标题title: Ray的笔记本 # 大封面和wiki列表页的标题tags: [知识库] # tags的类别形成了/wiki/index.html中的顶端导航栏。当你只想要一个隐身的项目时，tag也就没必要写了path: /wiki/my-notes/ # 给这个配置文件指定项目文件夹########## 封面/列表页 ###########icon: /assets/build_site_images/wiki-note-cover.jpg # 列表页图标 cover: /assets/build_site_images/wiki-note-cover.jpg # 封面页大图，不能如作者所言的用true，而是具体图片，coverpage: [cover, title, description] # 设置了才能开启封面页，且能指定组件logo: # v1.21.0, 似乎派不上用场 src: /assets/build_site_images/wiki-note-cover.jpg small: 108px # 针对列表页图标 large: 180px # 针对封面页大图description: 一个啥都张罗的技术笔记本，它即将是隐身的，只能手动在域名后添加`/wiki/notes/`访问########## 顶部 ############repo: # 右上角会显示ghrepo组件########## 左侧 ###########sidebar: - search: override: search filter: /wiki/my-notes/ # 限定搜索范围 placeholder: search in my-notes ... - toc - related - recenttoc: # 承担页面的分组、排序任务。组别也可取消，可置空字符串。 &#x27;日常问题解决&#x27;: - index # 必须有一个index页面。 - 常用代码小工具 &#x27;后端学习笔记&#x27;: - tag-plugins - tag-plugins/express########## 底部 ###########comment_title: &#x27;评论区仅供交流，有问题请提 [issue](https://github.com/JamesRay/上面的repo/issues) 反馈。&#x27;comments: service: giscus giscus: data-repo: JamesRay0713/blog-comments # 仓库的issue模块，映射到本项目的评论区 data-mapping: number # title data-term: 226# 如果想关闭评论区，这里写false没效果，得去具体页面的front matter写`comments: false`license: false # bool/str, 默认不显示许可协议share: false # bool/list, 默认不显示底部分享 step2: 写项目警告：一旦有/wiki/proj1/，则必须有_data/wiki/proj1-ID.yml配套；其他情况随意。 项目中至少有一个index.md，其他文件自行添加。每个文件的front matter至少包含下面前3个属性： /wiki/proj1/index.md---layout: wiki # 使用wiki布局模板wiki: proj1-ID # 这是项目id，对应 /_data/wiki/proj1-ID.ymltitle: 这是分页标题 # 不设置标题时，则该页面对项目不可见seo_title: 新标题 # 覆盖title--- step3: 上架项目在/_data/wiki.yml中增加当前项目ID，如下： - proj1-ID- proj2-ID 如果step1-step2准备了多套wiki项目，但不想展示在/wiki/index.html中, 这里只需不增加相应项目ID即可。 遇到到一些缺陷&#x2F;BUGstellar-v1.21.0 一些无效的属性、组件 post文章的cover的poster 标签插件里的gallery wiki文档配置中（如source\\_data\\wiki\\my-notes.yml）的logo属性 npm包的问题 2023&#x2F;12&#x2F;27：当安装hexo-related-popular-posts后，一些依赖版本会回退，此时我hexo g时，会报错：某些wiki项目的index.html渲染失败。 TODO对stellar的优化 让目录树可折叠 合并、精炼页脚的license和share 页面左下角的footer.social小组件在不需要的时候消除。","tags":["博客","hexo"],"categories":["博客"]},{"title":"常用命令手册","path":"/post/manual-useful-command/","content":"使用频率较高的命令收录于此，随手翻阅 Linux查看与查找系统、内核相关的信息 cat /etc/os-release ，sudo lsb_release -a uname --all env export查看硬件逻辑cpu核数：cat /proc/cpuinfo | grep &quot;processor&quot; |wc -l物理cpu核数：cat /proc/cpuinfo | grep &quot;physical id&quot; | sort | uniq|wc -l文件查找whereis pkgfind / -name &quot;*.txt&quot;文件、存储相关查看存储大小：当前系统磁盘的： 所处目录的： 文件的常用操作：切割文件： split -b 1G -d --additional-suffix=.txt target_file压缩文件： tar -zcvf file.tar.gz file解压缩文件： tar -zxvf file.tar.gz实时将终端内容存入日志文件：执行touch ~/&quot;session_$(date +&#39;%Y%m%d_%H%M%S&#39;).log&quot;后，将进入日志记录模式，此后终端中所有内容（包括[终端控制字符]）都会记录到日志文件中。 执行exit可退出日志记录模式。 执行less -r ~/....log可查看正确渲染出终端控制字符的日志文件。用户、权限等切换用户switch user：sudo su [username]以user1身份执行命令：sudo -u user1 command.sh脚本的执行:bash test.sh：启动一个新的Bash子shell来执行test.sh中的命令。它与你当前终端的shell是隔离的。sudo bash test.sh：子shell的操作者是用户root，不是当前shell的用户。否则添加- E参数。source test.sh或. test.sh：直接在当前shell执行。用户免密使用sudo：打开sudoers文件: sudo vim /etc/sudoers；在类似%sudo ALL=(ALL:ALL) ALL的行下添加一行：yourUserName ALL=(ALL:ALL) NOPASSWD: ALL；保存并退出。所有用户信息：cat /etc/passwd关于进线程、缓存实时进程：top; htop查看所有进程：ps aux ；ps [-ef]进程在前台后台切换：fg [pid]；bg [pid]杀死进程：kill -9 [pid], killall -9 [pname]清除系统缓存：sudo sh -c &quot;echo 1 &gt; /proc/sys/vm/drop_caches&quot; (1可换成2,3)进程的后台前台：把占用命令行的进程改到后台挂起：ctrl+ Z查看后台进程列表：jobs把后台挂起的程序，在后台运行起来：bg把后台运行的程序调用至前台：fg直接后台执行命令：command &amp;， nohup command， nohup command &amp;， nohup command &gt; /dev/null 2&gt;&amp;1 &amp;系统服务开&#x2F;关&#x2F;重启&#x2F;查看一个服务：sudo systemctl start/stop/restart/status 软件名功能同上（service是一个比较旧的服务管理命令）：sudo service docker stop将服务设为开机自启：sudo systemctl enable my-service自定义服务:创建一个新的服务单元文件，比如 /etc/systemd/system/my-service.service。编辑该文件，指定服务的配置，例如：[Unit]Description=My Custom ServiceAfter=network.target[Service]ExecStart=/path/to/your/commandRestart=always[Install]WantedBy=multi-user.target远程连接、端口、IP相关生成密钥对：看端口占用：netstat -ltunpIP查找windows内：用ipconfig注意： 列表中第一个IP值是本机IP；其他的比如vEthernet和vEthernet(WSL)下的IP是本机构建相应虚拟内网时的网关IP。linux内：查看完整信息：执行ifconfig，或ip a获取具体IP值：自身ip值：是ifconfig命令的输出中的 ‘eth0’ 的IP，或执行hostname -I | awk &#39;{print $1}&#39;注：若该Linux是服务器，则IP可能是动态的；若它是WSL2或容器，则IP一定是动态的。宿主ip值：可在宿主机执行ifconfig&#x2F;ipconfig, 其输出中的‘vthernet(WSL)’下的IP就是了；或在本机执行cat /etc/resolv.conf | grep nameserver | awk &#39;{ print $2 }&#39;注：只有WSL或容器才有宿主。注：wsl下的容器：其宿主IP是Windows的‘ethernet(WSL)’下的IP，千万千万不是wsl的哦。其网关IP却在wsl中。~ pythonconda类命令 环境 创建环境：conda create -n test1 [--clone base] | [python=3.7] [other pkgs] 激活环境：conda activate test1，灭活：conda deactivate conda env list conda remove -n *** --all 导出当前环境：conda env export &gt; environment.yaml 导入：conda env create -f environment.yaml 包 安装：conda install --yes -c &#39;channel名&#39; --file requirements.txt (pip install -r requirments.txt) &#96; docker 常用命令 最常用create详解run详解commit详解docker pull ubuntu:latest # 下载docker run -itd --name test ubuntu:latest /bin/bash # 运行docker exec -it test /bin/bash # 进入docker stop test # 停止docker commit containerID imgName1:tag1 # 生成镜像,即把你想要的容器状态持久化 # 推送镜像docker logindocker tag imgName1:tag1 jamesray0713/imgName1:tag1docker push jamesray0713/imgName1:tag1# 其他docker images # 列出所有镜像docker ps -a # 列出所有容器docker run 镜像id #新建容器并启动docker exec -it 容器ID /bin/bash #前提：容器已经启动。进入容器docker rm -f $(docker ps -aq) #删除所有的容器ctrl +P +Q #容器不停止退出docker inspect 容器ID # 查看某容器环境变量、详细配置docker create \\ -it \\ # 交互式和终端 --name my_container \\ # 容器名称 -p 8080:80 \\ # 端口映射 --volume /host/path:/container/path \\ # 挂载数据卷 --env MY_VARIABLE=value \\ # 设置环境变量 --network my_network \\ # 连接到指定网络 --hostname my_host \\ # 设置容器主机名 --restart always \\ # 容器退出时总是重启 --memory 512m \\ # 内存限制 --cpus 0.5 \\ # CPU 限制 --detach \\ # 后台运行 my_image:tag # 使用的镜像及标签docker run \\ -itd \\ # 交互式运行, --detach后台运行 #--rm \\ # 容器停止后自动删除 --name my_container \\ # 指定容器名称 -p 8080:80 \\ # 将主机端口映射到容器端口80 -v /host/path:/container/path \\ # 挂载主机目录到容器, 同功能：--mount type=bind,source=host_path,target=container_path --network my_network \\ # 连接容器到指定网络 --env MY_VARIABLE=value \\ # 设置环境变量 --label my_label=my_value \\ # 添加标签 --cpu-shares 512 \\ # CPU 分配权重 --memory 512m \\ # 内存限制 --cpus 0.5 \\ # 使用的 CPU 核心数 #--restart always \\ # 容器退出时自动重启 --privileged \\ # 赋予容器所有权限 --gpus all \\ my_image:tag \\ # 使用的镜像及标签 command_to_run_in_container # 容器中要执行的命令, 一般是 /bin/bashdocker commit \\ --author &quot;Your Name&quot; \\ --change &quot;ENV DEBUG=true&quot; \\ # 设置环境变量 DEBUG 为 true --change &quot;WORKDIR /app&quot; \\ # 设置工作目录为 /app --change &quot;USER newuser&quot; \\ # 设置用户为 newuser --change &quot;CMD [\\&quot;python\\&quot;, \\&quot;app.py\\&quot;]&quot; \\ # 设置容器启动时执行的命令 --change &quot;EXPOSE 8080&quot; \\ # 暴露容器端口 --change &quot;LABEL version=1.0&quot; \\ # 添加标签 --platform linux/amd64 \\ --quiet \\ # 静默模式，只输出新镜像的 ID CONTAINER_ID \\ NEW_IMAGE_NAME:TAG # 新镜像的名称和标签 命令大全docker attach #连接到正在运行中的容器docker build #使用 Dockerfile 创建镜像docker builder #管理builds docker builder prune #清除build缓存docker checkpoint #管理checkpoints docker checkpoint create #从正在运行的容器创建检查点 docker checkpoint ls #列出容器的检查点 docker checkpoint rm #删除指定的检查点docker commit #从容器创建一个新的镜像docker config #管理Docker配置 docker config create #创建配置文件 docker config inspect #查看配置文件信息 docker config ls #显示docker里已经保存得配置文件 docker config rm #删除配置文件docker container #管理容器 docker container prune #删除所有已停止的容器docker context #管理contexts docker context create #创建一个上下文 docker context export #将上下文导出到tar或kubecconfig文件中 docker context import #从tar或zip文件导入上下文 docker context inspect #在一个或多个上下文上显示详细信息 docker context ls #列出上下文 docker context rm #删除一个或多个上下文 docker context update #更新 docker context use #设置当前docker的上下文docker cp #用于容器与主机之间的数据拷贝docker create #创建一个新的容器但不启动它docker diff #检查容器里文件结构的更改docker events #从服务器获取实时事件docker exec #在运行的容器中执行命令docker export #将文件系统作为一个tar归档文件导出到STDOUTdocker history #查看指定镜像的创建历史docker image #管理镜像 docker image inspect #显示一个或多个镜像的元数据 docker image ls #列出本地镜像 docker image prune #删除没有使用的镜像 docker image rm #删除一个或多个镜像docker images #列出本地镜像docker import #从归档文件中创建镜像docker info #显示 Docker 系统信息，包括镜像和容器数docker inspect #获取容器/镜像的元数据docker kill #杀掉一个运行中的容器docker load #导入使用 docker save 命令导出的镜像docker login #登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hubdocker logout #登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hubdocker logs #获取容器的日志docker manifest #管理manifest(实验，不应用于生产环境) docker manifest annotate #向本地镜像清单添加附加信息 docker manifest create #创建用于注释和推入注册表的本地清单列表 docker manifest inspect #显示镜像清单或清单列表 docker manifest push #将清单列表推入仓库 docker manifest rm #从本地存储中删除一个或多个清单列表docker network #管理网络 docker network connect #将容器连接到网络 docker network create #创建一个网络 docker network disconnect #断开容器的网络 docker network inspect #显示一个或多个网络的元数据 docker network ls #列出网络 docker network prune #删除所有没有使用的网络 docker network rm #删除一个或多个网络docker node #管理集群(swarm)节点 docker node demote #从群集(swarm)管理器中降级一个或多个节点 docker node inspect #显示一个或多个节点的元数据 docker node ls #列出群集(swarm)中的节点 docker node promote #将一个或多个节点推入到群集管理器中 docker node ps #列出在一个或多个节点上运行的任务，默认为当前节点 docker node rm #从群集(swarm)删除一个或多个节点 docker node update #更新一个节点docker pause #暂停容器中所有的进程docker plugin #管理插件 docker plugin create #从rootfs和配置创建一个插件。插件数据目录必须包含config.json和rootfs目录。 docker plugin disable #禁用插件 docker plugin enable #启用插件 docker plugin inspect #显示一个或多个插件的元数据 docker plugin install #安装一个插件 docker plugin ls #列出所有插件 docker plugin push #将插件推送到注册表 docker plugin rm #删除一个或多个插件 docker plugin set #更改插件的设置 docker plugin upgrade #升级现有插件docker port #列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口docker ps #列出容器docker pull #从镜像仓库中拉取或者更新指定镜像docker push #将本地的镜像上传到镜像仓库,要先登陆到镜像仓库docker rename #重命名容器docker restart #重启容器docker rm #删除一个或多个容器docker rmi #删除一个或多个镜像docker run #创建一个新的容器并运行一个命令docker save #将指定镜像保存成 tar 归档文件docker search #从Docker Hub查找镜像docker secret #管理Docker secrets docker secret create #从文件或STDIN创建一个秘密作为内容 docker secret inspect #显示有关一个或多个秘密的详细信息 docker secret ls #列出秘密 docker secret rm #删除一个或多个秘密docker service #管理服务 docker service create #创建一个服务 docker service inspect #查看服务的元数据 docker service logs #获取服务的日志 docker service ls #列出服务 docker service ps #列出一个或多个服务的任务 docker service rm #删除一个或多个服务 docker service rollback #将更改恢复到服务的配置 docker service scale #缩放一个或多个复制服务 docker service update #更新服务docker stack #管理堆栈 docker stack deploy #部署新的堆栈或更新现有堆栈 docker stack ls #列出现有堆栈 docker stack ps #列出堆栈中的任务 docker stack rm #删除堆栈 docker stack services #列出堆栈中的服务docker start #启动一个或多个已经被停止的容器docker stats #显示容器的实时流资源使用统计信息docker stop #停止一个运行中的容器docker swarm #管理集群(Swarm) docker swarm ca #查看或旋转当前群集CA证书。此命令必须针对管理器节点 docker swarm init #初始化一个群集(Swarm) docker swarm join #加入群集作为节点和/或管理器 docker swarm join-token #管理加入令牌 docker swarm leave #离开群集(Swarm) docker swarm unlock #解锁群集(Swarm) docker swarm unlock-key #管理解锁钥匙 docker swarm update #更新群集(Swarm)docker system #管理Docker docker system df #显示docker磁盘使用情况 docker system events #从服务器获取实时事件 docker system info #显示系统范围的信息 docker system prune #删除未使用的数据docker tag #标记本地镜像，将其归入某一仓库docker top #查看容器中运行的进程信息，支持 ps 命令参数docker trust #管理Docker镜像的信任 docker trust inspect #返回有关key和签名的低级信息 docker trust key #管理登入Docker镜像的keys docker trust key generate\t#生成并加载签名密钥对 docker trust key load #加载私钥文件以进行签名 docker trust revoke #删除对镜像的认证 docker trust sign #镜像签名 docker trust signer #管理可以登录Docker镜像的实体 docker trust signer add #新增一个签名者 docker trust signer remove\t#删除一个签名者docker unpause #恢复容器中所有的进程docker update #更新一个或多个容器的配置docker version #显示 Docker 版本信息docker volume #管理volumes docker volume create #创建一个卷 docker volume inspect #显示一个或多个卷的元数据 docker volume ls #列出卷 docker volume prune #删除所有未使用的卷 docker volume rm #删除一个或多个卷docker wait #阻塞运行直到容器停止，然后打印出它的退出代码 Windows前端至少掌握HTML, DOM -&gt; CSS -&gt; JavaScript -&gt; jQuery -&gt; AJAX，在线工具 HTML资料：教程; 手册:标签-属性等。 CSS资料：教程; 手册:选择器-属性等。 快速入门C层叠S样式S表，使网页样式、布局更高效规范。本质来讲，CSS都是对HTML元素的style属性进行定义。 语法： 属性与值之间只有冒号，没有空格。 选择器：用于限定后面这组声明的使用范围。常见的选择器： 元素选择器 选择一种HTML元素，如：p &#123; color:blue; &#125;； 类选择器 选择class属性为特定值的所有HTML元素，如：.highlight &#123; color:yellow; &#125;; 选择class属性为特定值的一种HTML元素，如：p.highlight &#123; color:yellow; &#125;; ID选择器 选择id属性为特定值的那一个HTML元素，如：#runoob &#123; width:200px; &#125;; 属性选择器 选择指定属性为特定值的指定HTML元素，如：nput[type=&quot;text&quot;] &#123;border:1px solid gray;&#125;; 后代、兄弟、伪类、伪元素选择器…… css代码的3种出现方式 内联样式： 一个元素的临时装饰，位于HTML标签的style属性中，如：&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;/p&gt; 内部样式表：一个文档多处可复用，位于html.head.style元素的内容中，如： &lt;head&gt; &lt;style&gt; hr &#123;color:sienna;&#125; p &#123;margin-left:20px;&#125; body &#123;background-image:url(&quot;images/back40.gif&quot;);&#125; &lt;/style&gt;&lt;/head&gt; 外部样式表：独立文件随处使用，位于html.head.link元素的href属性中，如： \"mystyle.css\"即外部样式表&lt;head&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;&lt;/head&gt; JavaScript资料：教程, DOM文档对象模型, BOM浏览器对象模型; 手册：内置对象-Browser对象-DOM对象；。 基础知识 数据类型： 值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、空（Null）、未定义（Undefined）、Symbol。 引用数据类型（对象类型）：对象(Object)、数组(Array)、函数(Function)，还有两个特殊的对象：正则（RegExp）和日期（Date） JS对象：在 JavaScript中，几乎所有的事物都是对象。 ‘对象’实例：var person = &#123; firstName: &quot;John&quot;, // 这是对象属性，值的访问方式：`person.firstName` lastName : &quot;Doe&quot;, id : 5566, fullName : function() // 访问时，不加`()`是对象属性；加`()`是对象方法。 &#123; return this.firstName + &quot; &quot; + this.lastName; &#125;&#125;; JS对象是变量的容器、键值对的容器、 DOM BOM 所有JS全局对象、函数以及变量均自动成为 window 对象的成员。全局变量是 window 对象的属性。全局函数是 window 对象的方法。甚至 HTML DOM的document也是window对象的属性之一。 JS高级程序设计工具——JS库&#x2F;框架 jQuery：是目前最受欢迎的 JavaScript 框架。它使用 CSS 选择器来访问和操作网页上的 HTML 元素（DOM 对象）。jQuery 同时提供 companion UI（用户界面）和插件。见下一节。 Prototype 简单使用方法 与 jQuery 类似，Prototype 也有自己的 $() 函数。$() 函数接受 HTML DOM 元素的 id 值（或 DOM 元素），并会向 DOM 对象添加新的功能。 与 jQuery 不同，Prototype 没有用以取代 window.onload() 的 ready() 方法。相反，Prototype 会向浏览器及 HTML DOM 添加扩展。 … jQuery资料：教程；参考手册；API手册 基础知识jQuery 是一个 JavaScript 库。jQuery 极大地简化了 JavaScript 编程。 该库的功能HTML 元素选取HTML 元素操作CSS 操作HTML 事件函数JavaScript 特效和动画HTML DOM 遍历和修改AJAXUtilities除此之外，jQuery 还提供了大量的插件。 使用方法： 先在网页的&lt;script&gt;标签中引用该库，如：&lt;script src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt; 为更快引入，可修改src为jquary的合适的CDN地址，如: 国外的（https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js、https://cdnjs.com/…）， 国内的（https://cdn.staticfile.org/jquery/3.4.0/jquery.min.js） 疑惑为什么没有在 &lt;script&gt; 标签中使用 type=&quot;text/javascript&quot; ？在 HTML5 中，JavaScript 是 HTML5 以及所有现代浏览器中的默认脚本语言！ 语法：核心：选取 HTML 元素，执行操作。基础语法： $(selector).action() 关于选择器：jQuery 使用的语法是 XPath 与 CSS 选择器语法的组合。 AJAX资料：教程AJAX（异步的 JavaScript 和 XML）是与服务器交换数据的技术，它在不重载全部页面的情况下，实现了对部分网页的更新。AJAX不是语言，是一套标准。 NodeJS包管理工具 镜像源node_mirror: https://npm.taobao.org/mirrors/node/npm_mirror: https://npm.taobao.org/mirrors/npm/ API找图unsplash 用关键字搜索并指定尺寸：https://source.unsplash.com/2000x400/?关键词,关键词 对目标图片处理：https://images.unsplash.com/photo-1470770841072-f978cf4d019e?q=80&amp;w=2670&amp;auto=format&amp;fit=crop&amp;ixlib=rb-4.0.3相关参数w：图像的宽度。h：图像的高度。fit：调整图像的方式，可能的值包括 crop（裁剪）和 clip（裁剪并填充）。q：图像的质量。通常是一个介于 0 和 100 之间的数字。fm：图像的格式，可能的值包括 jpg、webp 等。auto：自动选择最佳格式，通常与 fm 一起使用。crop：裁剪图像的区域。ixid：似乎是用于图像处理的某种标识符。blur：用于指定图像的模糊度，例如 blur&#x3D;10.dpr：设备像素比，用于指定图像的分辨率，例如 dpr&#x3D;2 表示两倍的设备像素比。ar：宽高比，用于指定图像的宽高比，例如 ar&#x3D;16:9","tags":["Linux","python","Deep Learning"],"categories":["toolkit"]},{"title":"网络连接相关","path":"/post/toolkit02-about-network-connection/","content":"汇总不同场景下主机之间的远程连接方法、代理服务等；探索更全能快捷的远程开发方式。 ①前两节主要讲解了如何用ssh实现两主机的互访；②第三节讲了如何通过代理访问外网资源；③第四节介绍了当我们只专注与远程生产场景下的，更高效便捷的访问方式——code CLI。非特殊说明, 下述客户端指代主访主机, 服务端指代被访主机。 1. 远程连接：服务、客户两端可直连访问1.1 服务端确保安装openssh-server 检验: ssh -V win10安装: 控制面板→ 程序→ 启关windows功能→ 下载ssh服务器 Linux安装: sudo apt-get install openssh-server sudo service sshd start/status # 查看状态: wsl和Linux sudo systemctl status/restart sshd # 查看状态: Linux 可选：按需配置服务端/etc/ssh/sshd_config（改后需重启sshd） Port 2222 # 如wsl1中要修改，不与win冲突; 而wsl2可不必修改, 因为它已是一台独立主机 PermitRootLogin yes # 可以root远程登录PasswordAuthentication yes # 密码验证登录GSSAPIAuthentication yes # 解决一台服务器管理多个ssh服务UseDNS no # 加快响应速度因为在内网环境下ListenAddress 192.168.25.130 # 只监听指定内网的IPMatch User anoncvs # 当前环境允许登录的用户GatewayPorts yesAllowTcpForwarding yes...... 1.2 免密码登录——配密钥 核心：公钥在服务端，私钥在客户端 密钥对生成方法: ssh-keygen -t rsa -C &#39;hl1670704310@icloud.com&#39; -f ~/.ssh/someName-rsa 情况1: 用新密钥对 建议在客户端本地生成，方法见上 公钥发给服务端: 自动: ssh-copy-id -i ~/.ssh/name_rsa.pub -p 22 user@remote_host 手动: 复制~/.ssh/someName-rsa.pub的内容到服务端主机的~/.ssh/authorized_keys 情况2: 用旧密钥对 客户端: 把私钥存放于~/.ssh/id_rsa, 用于ssh -i参数; 修改其权限chmod 600 rsa_path 服务端: 公钥内容复制到~/.ssh/authorized_keys 1.3 登录服务端主机 完整命令，无密直连: ssh -p 22 user@remote_host 最简指令（推荐）: ssh test 前提须在客户端配置~/.ssh/config Host test HostName serverIP User serverUSER Port 22 ServerAliveInterval 60 IdentityFile ~/.ssh/id_rsa 1.4 常见问题排查 连接出问题，先尝试删除客户端~/.ssh/know_hosts 2. 远程连接服务、客户两端不可直连访问场景: 两主机位于不同内网, 且都可访问互联网, 假设这里公司某主机为服务端(确保安装有sshserver), 家中笔记本为客户端 2.1 当拥有一个公网IP时(e.g.云服)🚩2.1.1 方法1: 远程端口转发&#x2F;内网穿透核心: 先让远程主机连到跳板机, 把ssh端口暴露给跳板机指定的端口, 再让本地主机连到跳板机的指定端口, 实现穿透。 准备两对密钥: KEY-sj: 用于服务端(pri)→ 跳板机(pub)的连接, reach_jumper_rsa KEY-cs: 用于客户端(pri)→ 服务端(pub)的连接, reach_luge_server_rsa 跳板机: 检查服务端配置(戳, 注: 在远程主机眼里跳板机是服务端) 防火墙设置: 在入站策略中开启任一闲置端口(如18086)并重启系统。用以映射到服务端的ssh端口, 让客户端以为连到该端口, 就等于连到了服务端的ssh服务。 sshd配置: 在/etc/ssh/sshd_config中至少保证GatewayPorts yes和AllowTcpForwarding yes; 可选ForwardAgent yes 密钥配置: 把KEY-sj的公钥内容添加到~/.ssh/authorized_keys文件，没有文件则创建 服务端主机&#x2F;远程主机: 检查服务端配置(戳) 先处理密钥: 将KEY-sj的私钥文件复制到~/.ssh/, 改权限为600； 将KEY-cs的公钥内容添加到~/.ssh/authorized_keys文件, 没有文件则创建； 后配置与跳板机的ssh连接, 在~/.ssh/config中输入: Host jumper HostName 跳板机IP Port 跳板机ssh端口 User 跳板机用户名 ServerAliveInterval 60 IdentityFile ~/.ssh/刚才KEY-sj的私钥 后执行远程转发命令 ssh -gfnNTR 18086:localhost:22 jumper 解释: g开启网关转发, f放入后台, n不接受输入, N不开交互式shell, T禁用伪终端, R代表这是远程的转发规则。 该命令将本机(服务端)的22端口映射到了跳板机的18086端口, 使得外界访问本机的ssh服务变为可能。 该命令长期在服务端后台执行, 可通过ps aux | grep &#39;ssh -gfnNTR 18086:localhost:22 jumper&#39;命令查看其进程 客户端主机:ssh 服务端用户名@跳板机IP -p 18086 -i KEY-cs的私钥若有问题，添加-v参数可以打印详细日志；或者删掉~/.ssh/known_host*相关文件试试看。 上述命令也可改到~/.ssh/config中。 2.2 当无公网IP时2.2.1 可视化内网穿透软件使用场景: 服务端有桌面系统, 如工位上的windows, 软件需安装于服务端 花生壳:直接添加一个端口映射项目即可, 可最终得到命令形如ssh -p 21570 james@44621m7c15.yicp.fun;优点: 足够简单; 缺点: 花生壳定义到wsl的映射时, 需面临宿主机每次开关机都会重启虚拟网络适配器导致wsl的内网IP改变的情况, 不够方便。 ZeroTier：功能：创建一个虚拟局域网，实现多台机器的互访。 2.2.2 命令行穿透工具使用场景: 如工位上的wsl, 公司内网的某台服务器 多种工具, 这些工具不仅限于tcp协议 bore优缺点: 简单, bore.pub带宽超低。 公网主机(可选):\t将该主机作为bore服务器, 相当于跳板机: bore server 服务端: 在想要暴露端口的主机上下载二进制可执行文件 暴露本地端口: bore local 22 --to bore.pub 如果设置了公网主机, 命令改为 bore local 22 --to 公网主机IP 你会得到一个新端口newP 客户端: 访问暴露的端口: ssh -p newP 服务端用户名@bore.pub 其他 2.3 当服务端IP不固定时 场景：本地想访问工位的wsl 难点：Windows是通过虚拟交换机给Win10主机与WSL2子系统分别分配IP地址，当Windows重启并再次打开WSL2时，虚拟交换机会被重新创建，分配给它们的IP地址也会随着改变。 常规思路：每次重启后都用wsl2的新IP来更新ssh命令 讨巧思路：直接访问win端系统，在进入cmd时系统自动跳转到bash.exe(就像Linux中在.bashrc末尾加上zsh一样) 方法：执行跳转命令 New-ItemProperty -Path &quot;HKLM:\\SOFTWARE\\OpenSSH&quot; -Name DefaultShell -Value &quot;C:\\WINDOWS\\System32\\bash.exe&quot; -PropertyType String -Force 然后再通过(#2.1，或#2.2)的方法访问工位的Windows 3. 破qiang访问互联网3.1 只想访问特定的外部网站场景：我国内的服务器需要从github下载文件, 为此只想实现访问github域名的能力 下述方法综述法1~法4我多次尝试，有的有时有效，有的完全无效；只要自己有梯子，法5一定能行；法6属于是曲线救国了，保底方案。 color&#x3D;green 法1：修改本地hosts文件 更新：查到的IP地址国内也不一定能访问，此法无效。 原理：我国通过一些技术手段实现了DNS污染，返回错误的GitHub的ip地址。因此我们只需更改&#x2F;增添hosts中的域名IP映射即可 获取正确映射：进入网站 查询（如 github.com -&gt; 20.205.243.166） 在Windows： 修改C:\\Windows\\System32\\drivers\\etc\\hosts权限， 后进入添加映射（如 20.205.243.166 github.com）， 刷新本地DNS缓存：ipconfig /flushdns 在Linux： 只需在/etc/hosts添加映射即可 若未生效，sudo systemctl restart nscd，如报错则须安装：sudo apt install nscd 或 sudo /etc/init.d/nscd restart 法2：修改DNS 原理：不同的DNS服务商可能有不同的解析方法 在Linux：sudo vim /etc/resolv.conf添加&#x2F;修改nameserver ，指定你想要使用的DNS服务器的IP地址，后执行sudo systemctl restart systemd-resolved生效 如：nameserver 114.114.114.114 nameserver 223.5.5.5 法3：借助github520项目原理仍是修改hosts 法4：针对github网站可用ssh密钥对 在主访主机准备密钥对，见这里 公钥复制到github: “Settings” -&gt; “SSH and GPG keys” -&gt; “New SSH key” 两种处理方式，但都是ssh连接：方式1方式2 验证可以连接：ssh -v -T git@github.com, 会返回successful 此时可以下载仓库：git clone git@github.com:your-username/your-repository.git 在~/.ssh/config添加远程主机信息如下：Host github User hl1670704310@icloud.com Hostname ssh.github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa port 443 验证可以连接：ssh -T git@github.com 法5：配置代理假设我们已经通过一些渠道得到了一个梯子，且正运行在本地，那请移步系统的设置→ 网络→ 代理→ 手动设置代理获取代理地址和端口（e.g. 127.0.0.1:7890）然后在终端给git配置代理服务器：git config --global http.proxy http://127.0.0.1:7890可验证查看配置成功：git config --global --list 法6：借助gitee以上方法均无效时，老实把目标仓库导入到gitee，然后使用gitee仓库链接。 3.2 丝滑访问所有外网3.2.1 VPN软件 小火箭 v2ray clash for windows for linux 3.2.2 代理商 BSTE: 目前最便宜，￥85&#x2F;年，100G&#x2F;月 3.2.3 自造代理服务器 永久免费HeroKu部署：实践TODO 4. VScode强大的远程开发工具—— Remote Tunnels中文；microsoft文档 工具原理本质是vscode客户端与服务端的通信。在服务端已经安装好code cli且运行了通道命令的前提下，我们可直接用URL连接远端，如server&#x2F;VM&#x2F;container&#x2F;WSL等（远端需能访问互联网）。该工具有助于高效便捷地开发，但有个缺点是必须事先想办法登录远端手动开启通道命令。 使用场景 当用于生产的服务器在公司内网，无法直接访问怎么办？ 当你把工位电脑装上向日葵，延迟和隐私问题该咋办？ 当公司服务器管理严格，你买了公网IP，用ssh搞端口转发，搭建的通道被网管掐了又怎么办？ 当在服务器里docker容器搞生产，层层端口、IP设置令人头大，又该如何应对？（当然SSH/tunnel到宿主机+ Dev Container插件也比较简单） vscode服务端解君愁。 如何使用 远程服务端： 下载独立包装的code CLI压缩包后解压，认准系统和架构，如下图： 也可命令方式： curl -Lk &#x27;https://code.visualstudio.com/sha/download?build=stable&amp;os=cli-alpine-x64&#x27; --output vscode_cli.tar.gztar -xf vscode_cli.tar.gz 上面的下载连接只针对Linux-Alpine x64系统及架构（不过其他版本如focal好像也能用），若是其他系统架构，请参考。 按如下图步骤进行：①用命令创建隧道：./code tunnel，将得到绑定到此远程计算机的 vscode.dev URL。若是首次创建，②需按提示选择登录账户（建议Microsoft）、③进入devicelogin的url，登录账户，输入它给你的验证码、④给这台远程机器命名。⑤获得vscode dev的URL 确保通道持久运行，戳 本地客户端： 方法1：在本地网页上开发。直接打开 URL即可进入网页版vscode desktop 若是首次打开URL，会提示登录GitHub&#x2F;Microsoft账户来授权你能正确地访问隧道。（国内没有梯子的用户建议使用Microsoft账户） 方法2：用本地VScode Desktop开发。先安装插件Remote SSH，Remote Tunnels；后进入左侧面板的Remote，点击Tunnels右侧的+，选择账户，系统会自动刷出你账户下的远程机器名，连接即可。","tags":["ssh","port forwarding"],"categories":["toolkit"]},{"title":"操作系统配置相关","path":"/post/toolkit01_about_OS_config/","content":"该手册可用于对新到手的系统进行快速配置. 基于不同的系统环境，会有不同的配置方法，下面列举了4种场景 Windows安装系统 制作启动盘(可选) 启动Dabaicai.exe(下载) 我的存放于E:\\app_tools\\a00.关于装系统、分区、EFI启动项设置等\\重装系统\\DaBaiCai\\Dabaicai.exe 根据‘使用教程’逐步制作。 制作好的镜像在J:\\windows_iso_library目录下，按需选择一个. 已有启动盘，做好一切C盘重要数据备份后，重启。 重启界面迅速按F12，进入BIOS界面 选择含USB Device类似字符，进入winPE操作系统模式。 可进行选择性分区等操作。最后一键还原进行重装系统。 注：某些iso跟大白菜不太兼容，一键还原后，开机重启长久卡在logo界面。别慌，重进PE系统，解压该iso，按照里面的说明再次重装（即此时大白菜只给了我PE界面，重装的活儿是其他工具搞定的） 配置系统 安装驱动：百度获取厂商驱动程序，安装，重启生效，不然蓝牙、音响等都会有问题。 我的驱动程序存在E:\\app_tools\\a00.关于装系统、分区、EFI启动项设置等\\装机驱动等\\雷神官网驱动下载，按README.md操作。 解放C盘：修改文件夹左边快速访问栏的‘下载、文档、图片’的属性→位置，移动到其他盘(如G:\\doc) office的部署安装 原因：大部分软件都在非C盘中，但office默认在C，因此需特别地将其重新安装 下载: xoffice部署工具并解压 我的存放于H:\\02.办公工具\\2.office\\Office Tool\\Office Tool Plus 部署：阅读’新手教程’安装详细了解，或如下操作： 部署→’安装文件管理’模块→选择文件→选.\\Office Tool\\Office\\Data中任一.cab文件（实现离线部署） 依次设置’产品、应用程序、语言、部署设置(64位，当前通道，安装)’模块→开始部署。 激活：E:\\app_tools\\暴风激活工具V17.0.zip 配置生产环境如果在windows中有一些写代码的小需求，可安装git。为了获得非阉割版的git，建议一步到位，安装Git for Windows SDK工具包。 git-sdk是一个仿Linux的集成开发环境，可以省去单独安装git git-bash g++ make python(多版本) perl ruby sqlite msys clang mingW32 mingW64 pacman等工具的烦恼安装教程 配置：在win平台搞深度学习(可选)在Nvidia显卡条件下，需安装显卡驱动（略）、CUDA、cuDNN 查看显卡驱动信息，获得显卡最大支持的CUDA版本：nvidia-smi 装CUDA流程总结： 选择CUDA版本：不高于显卡最大支持版本，且要契合项目要求 下载exe(local)，执行安装 选自定义安装: 第一次安装，尽量全选(除了CUDA-&gt;visual studio); 第n次安装，尽量只选择CUDA，不然会出现错误。 安装目录尽量默认，因为后期开发中很多报错来源于路径问题。 控制面板-&gt;程序将得到一堆CUDA软件 添加到系统环境变量：有4个，可能后两个未自动生成，需参考下图手动配，NVCUDASAMPLES_ROOT; NVCUDASAMPLES11_0_ROOT 验证：nvcc -V 装cuDNN流程总结 注册&#x2F;登录账号，下载匹配CUDA的版本 解压得到3个文件夹，直接全盘拷贝到cuda的安装目录下 cuDNN 其实是 CUDA 的一个补丁，专为深度学习运算进行优化的。 以下4个路径添加到系统环境变量的path： ....\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.1\\bin....\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.1\\include....\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.1\\lib....\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.1\\libnvvp 验证：执行将得到显卡详细配置参数 cd 安装目录\\extras\\demo_suite.\\bandwidthTest.exe.\\deviceQuery.exe WSL2安装系统 环境准备 确保虚拟化选项开启：一般默认开启，不然需要进电脑的BIOS设置里开启 打开设置：控制面板-&gt;程序-&gt;启用或关闭windows功能-&gt;开启（Windows虚拟机监控程序平台、适用于Linux的Windows子系统、Hyper-V）三个功能。 将虚拟化平台的启动类型设置为自动： bcdedit /set hypervisorlaunchtype auto 重启. 安装 可命令行安装：wsl --install -d Ubuntu 可Microsoft store安装 其他相关命令(管理员权限开终端) wsl --update # 升级内核wsl --listwsl -l --shutdown # 重启内核，首次安装需要重启wsl -l -v # wsl状态、版本 配置系统 （可选）迁离C盘，在其他盘中形成ext4.vhdx文件： wsl --export Ubuntu-20.04 K:\\Ubuntu_subSystem\\ubuntu2004.tar # 导出到压缩包wsl --unregister Ubuntu-20.04wsl --import Ubuntu-20.04 K:\\Ubuntu_subSystem\\ubuntu2004_fs K:\\Ubuntu_subSystem\\ubuntu2004.tar --version 2 # 导入到其他盘ubuntu2004 config --default-user hlei0 # 把Linux的之前的用户名添加上 注：也可手动进行’import’操作：Add-AppxPackage .\\Ubuntu_2004.2020.424.0_x64.appx 使能支持systemctl &#123;cat &lt;&lt;EOT[boot]systemd=trueEOT&#125; | sudo tee /etc/wsl.conf​exit 后在cmd重启：wsl --shutdown, wsl 然后直接跳转linux整个流程完成配置。 debug 当宿主机又重装了，wsl其实可正常使用 原理：microsoft store的ubuntu软件，和wsl2的文件系统是分开的。没有软件，文件系统照常运行。因为迁移了fileSystem后，即使ubuntu软件被卸载，但ext4.vhdx存在，便可用wsl命令在重装后的cmd中继续访问子系统。 当.vhdx损坏，可用wsl --import命令解压出新的.vhdx继续使用wsl。 配置：在wsl2平台搞深度学习(可选)直接跳转[linux](#Linux-3)搞深度学习章节完成配置。 &gt; wsl2的显卡驱动直接用的宿主机的，无需安装。 docker😓 在win安装Docker Desktop 不建议，因为吃内存和cpu；可选择在wsl中安装dockerwin端docker的角色类似wsl 安装教程 验证：docker --version，wsl -l -v 配置国内源：进设置→ docker Engine→ 框中添加： &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;, &quot;http://hub-mirror.c.163.com&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot; ] 迁离C盘： 关闭docker, 后执行 wsl --shutdown # 关机Linuxwsl --export docker-desktop-data K:\\Ubuntu_subSystem\\docker_library\\docker-desktop-data.tar # 导出压缩包wsl --export docker-desktop K:\\Ubuntu_subSystem\\docker_library\\docker-desktop.tar # 导出wsl --unregister docker-desktop-data # 注销wsl --unregister docker-desktop # 注销wsl --import docker-desktop-data K:\\Ubuntu_subSystem\\docker_library\\data\\ K:\\Ubuntu_subSystem\\docker_library\\data\\docker-desktop-data.tar --version 2 # 导入wsl --import docker-desktop K:\\Ubuntu_subSystem\\docker_library\\distro\\ K:\\Ubuntu_subSystem\\docker_library\\distro\\docker-desktop.tar --version 2 # 导入 😀 在Linux端安装Docker Engine 教程速览: 安装 # （可选）卸载旧版本sudo apt-get remove docker docker-engine docker.io containerd runc # 安装依赖sudo apt-get updatesudo apt-get install ca-certificates curl gnupg# 添加官方的gpgkeysudo mkdir -m 0755 -p /etc/apt/keyringscurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg# 设置软件库codename=$(grep VERSION_CODENAME /etc/os-release | cut -d&#x27;=&#x27; -f2)echo \\&quot;deb [arch=&quot;$(dpkg --print-architecture)&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\&quot;$(. /etc/os-release &amp;&amp; echo &quot;$codename&quot;)&quot; stable&quot; | \\sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullsudo apt-get update# 安装docker引擎sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin# 启动sudo service docker start# 验证sudo docker run hello-world 配置镜像源 获取镜像加速器地址：登录阿里云-&gt;控制台-&gt;搜索容器镜像服务-&gt;’镜像加速器’ 添加镜像 sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;&quot;registry-mirrors&quot;: [&quot;https://你自己的.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker 启动 普通Linux中：sudo systemctl start docker(还有restart, status…)；后docker启动 wsl2中：sudo service docker start debug 碰到Temporary failure resolving ‘gb.archive.ubuntu.com’问题： 可以永久性地在你的系统中添加一个DNS服务器：echo &quot;nameserver 8.8.8.8&quot; | sudo tee /etc/resolvconf/resolv.conf.d/base &gt; /dev/null 😀 在wsl2安装Docker Engine和Linux端一模一样。 ⭐⭐⭐一个很难受的BUG: wsl2中的docker的Ubuntu，其内核依然是WSL2，不是纯粹的Ubuntu。 原因：wsl2是Ubuntu，但不是完整的Ubuntu；那么和wsl2共用内核的docker容器，自然是跟wsl2啦。 wsl2的局限性：不能使用Linux原生的systemctl来管理服务。 局限性的解决办法： 对于wsl2，戳 对于wsl2里的docker容器，设置docker run的参数来模拟原生环境: --privileged: 赋予容器特权，这对于模拟Systemd环境是必要的。--tmpfs /run --tmpfs /run/lock: 将 &#x2F;run 和 &#x2F;run&#x2F;lock 设置为tmpfs文件系统，以便Systemd单元正常工作-v /sys/fs/cgroup:/sys/fs/cgroup:ro: 将主机的 &#x2F;sys&#x2F;fs&#x2F;cgroup 挂载到容器中，以便容器内的Systemd能够访问它。 配置：在docker容器中搞深度学习(必选) 一般的配置方法: 宿主机：装驱动、装NVIDIA Container Toolkit (容器调用宿主机GPU资源的必要条件)； 容器里：装CUDA、cuDNN（通常pull的镜像里这两个都是现成的）。 特殊情况：win版Doker Desktop下，容器可以直接使用gpu：(未验证) 测试：docker run --rm -it --gpus=all nvcr.io/nvidia/k8s/cuda-sample:nbody nbody -gpu -benchmark step1 宿主机装显卡驱动：若是WSL2，不必装；若是Ubuntu，自行百度。 step2 宿主机装NVIDIA Container Toolkit, 该工具能使docker容器中具有调用gpu的能力。 安装方法# 建立package repository 和 GPG keydistribution=$(. /etc/os-release;echo $ID$VERSION_ID) \\ &amp;&amp; curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\ &amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/experimental/$distribution/libnvidia-container.list | \\ sed &#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#x27; | \\ sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.listsudo apt-get update# 安装sudo apt-get install -y nvidia-container-toolkit# 设置Docker daemon 守护进程识别Nvidia容器Runtimesudo nvidia-ctk runtime configure --runtime=docker##重启dockersudo systemctl restart docker# 测试docker run --rm -it --gpus=all nvcr.io/nvidia/k8s/cuda-sample:nbody nbody -gpu -benchmark step3 容器里装CUDA、cuDNN(跳转); 或直接pull现成镜像使用。 Linux🚩 自动配置脚本：点击下载该脚本可对一个Ubuntu新系统进行一键配置，脚本有以下模块（如果只想手动配置部分模块请跳转下一节）： 必定安装的①②③⑦模块： ①配置国内源：加速apt的软件包的下载速度。 ②安装基础软件包：“wget” “curl” “git” “vim” “net-tools” “iputils-ping” “htop” “tmux”“zsh” “kmod” “g++” “gcc” “cmake” “psmisc” “language-pack-en” ③安装oh-my-zsh：比Linux默认的bash更便捷高效的命令行工具。 ⑦安装vscode CLI：vscode的无桌面版客户端，用于远程生产。 选择性安装的：若带--in-container参数，则脚本提前结束；若不带，则安装④⑤⑥模块 ④安装Miniconda； ⑤安装docker； ⑥安装NVIDIA Container Toolkit。 注：脚本不包含安装CUDA+ cuDNN部分, 需手动。 脚本使用方法： 下载脚本：复制所有内容； 编写脚本：cd ~ &amp;&amp; tee ~/config_script.sh；粘贴ctrl+ V；退出文件ctrl+ C 执行脚本：bash ~/config_script.sh [--in-container] 注意：根据实际需求，完全可以自选任意模块的组合，进行一键配置。 注意：将执行较长时间，结束后注意排查日志看有无报错。 注意：除了开始阶段可能需要手动设置时区外，其他命令均自动完成。 时区设置如下，需按提示依次填写6, 70: 刷新配置：source ~/.bashrc 1. 手动配置：配置国内源sudo mv /etc/apt/sources.list /etc/apt/sources.list_backupsudo vim /etc/apt/sources.list 在vim中写入： 阿里源#deb-src http://mirrors.aliyun.com/ubuntu/ $codename main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ $codename main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ $codename-security main restricted universe multiverse#deb-src http://mirrors.aliyun.com/ubuntu/ $codename-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ $codename-updates main restricted universe multiverse#deb-src http://mirrors.aliyun.com/ubuntu/ $codename-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ $codename-backports main restricted universe multiverse#deb-src http://mirrors.aliyun.com/ubuntu/ $codename-backports main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ $codename-proposed main restricted universe multiverse#deb-src http://mirrors.aliyun.com/ubuntu/ $codename-proposed main restricted universe multiverse 或 清华源# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiversedeb http://security.ubuntu.com/ubuntu/ focal-security main restricted universe multiverse# deb-src http://security.ubuntu.com/ubuntu/ focal-security main restricted universe multiverse 注意，$codename需更换为适合本机的codename，查看方式： sudo lsb_release -a sudo apt-get updatesudo apt-get upgrade 2.手动配置： 配置基础工具终端美化：ohmyzsh 若不想安装zsh, 最简单的bash美化：在~/.bashrc中添加：export PS1=&quot;\\033[1;35m&gt; \\T, \\u, \\w\\[\\033[0m\\] \\$ &quot;，可将命令行头变成： `> 08:29:56, root, ~ $ ` 安装zsh sudo apt-get install zsh -yvim ~/.bashrc # 进入后添加：if [ -t 1 ]; then exec zsh; fi。然后重启终端echo $SHELL # 检验zsh为当前shell 下载安装ohmyzsh 官方库及教程, 鉴于国内环境，将纯手动安装： 将官方库导入到gitee.com 下载安装脚本：wget -O- https://gitee.com/mirrors/ohmyzsh/raw/master/tools/install.sh &gt; ~/install.sh 进入脚本搜索ohmyzsh/ohmyzsh改为jamesray0713/ohmyzsh，搜索github改为gitee 安装：sh ~/install.sh 配置ohmyzsh 换主题：sudo vim ~/.zshrc，修改为 ZSH_THEME=&quot;robbyrussell&quot; 加插件： cd .oh-my-zsh/custom/plugins git clone https://gitee.com/jamesray0713/zsh-autosuggestions # 自动填充git clone https://gitee.com/jamesray0713/zsh-syntax-highlighting # 高亮vim ~/.zshrc 后将plugins=( git )改为plugins=( git zsh-autosuggestions zsh-syntax-highlighting ) 改抬头： 进入~/.oh-my-zsh/themes/robbyrussell.zsh-theme， 修改第二行为：PROMPT+=&#39; %&#123;$fg[cyan]%&#125;[$PWD]%&#123;$reset_color%&#125; $(git_prompt_info)&#39; 重启终端 包管理：miniconda用python做项目前，一定要做好版本管理，防止版本冲突、包冲突问题。为此python有自带的venv，而更流行的是conda，这里只介绍python的换源、conda的安装及换源。 若不安装conda，则只需pip更换国内源: 进入~/.pip/pip.conf文件（没有则创建），写入以下内容： [global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple # 清华源#index-url = https://mirrors.aliyun.com/pypi/simple/ # 阿里源 miniconda:先下载、安装: mkdir ~/packagescd packageswget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.shbash Miniconda3-latest-Linux-x86_64.sh -b -p ~/Miniconda3 # 用zsh可能有未知的错误，b是静默安装vim ~/.condarc 后更换国内源: channels: - defaultsshow_channel_urls: truedefault_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/rcustom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud 检验：进入当前shell的配置文件（如~/.zshrc）末尾查看是否有被&gt;&gt;&gt; conda initialize &gt;&gt;&gt;字样包含的内容，没有的话从~/.bashrc里复制过来（其中的shell.bash改为shell.zsh。 3. 手动配置：在Linux平台搞深度学习（可选） 安装显卡驱动（略）; 宿主机安装容器工具（跳转 安装cuda：在链接中指定版本、选定平台，即可得到相应安装代码，下面是wsl版的。根据实际需要版本，将下述11.8进行更换 wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pinsudo mv cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600wget https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda-repo-wsl-ubuntu-11-8-local_11.8.0-1_amd64.debsudo dpkg -i cuda-repo-wsl-ubuntu-11-8-local_11.8.0-1_amd64.debsudo cp /var/cuda-repo-wsl-ubuntu-11-8-local/cuda-*-keyring.gpg /usr/share/keyrings/sudo apt-get updatesudo apt-get -y install cuda 设置环境变量：在~/.zshrc末尾添加如下，后重启终端 export PATH=/usr/bin:$PATHexport PATH=/usr/local/cuda-11.8/bin:$PATHexport LD_LIBRARY_PATH=/usr/local/cuda-11.8/lib64:$LD_LIBRARY_PATH 验证：nvcc -V 安装cuDNN 下载合适版本的cuDNN # 安装debsudo dpkg -i cudnn-local-repo-ubuntu2204-8.8.1.3_1.0-1_amd64.deb# 拷贝秘钥cd /var/cudnn-local-repo-ubuntu2204-8.8.1.3/cudnn-local-*-keyring.gpg /usr/share/keyrings/# 刷新, 查看支持的软件包sudo apt-get updateapt-cache search cudnn# 指定刚刚检查的软件包名称以安装cudnnsudo apt -y install libcudnn8 libcudnn8-dev# 验证dpkg -l | grep cudnn","tags":["Linux","OS","Windows","docker"],"categories":["toolkit"]},{"path":"/explore/index.html","content":"文章站点项目大佬友链探索空间 本站印象笔记传送门 重要TODO… 有空TODO博客网站持续搭建维护 优雅写博客——GitHub Codespaces(TODO)如果你经常需要在一些临时电脑上写写稿子、预览效果，不能立即发布且需要多端同步，或许这是个不错的选择，详见这篇文章： https://xaoxuu.com/blog/20221121/https://xaoxuu.com/blog/20221121/ 博客站友链&#x2F;引流方法： 加入虫洞项目 加入开往项目 CDN加速服务：https://www.upyun.com/ 做一个电子书的wiki 2023 视频文章推荐为什么有些人看起来不努力，却进步飞快？【正确打开 2023】 有的人忙着翻身，有的人急着认命 一小时读完《Vue.js 设计与实现》 要钱不要命"},{"path":"/oasis/index.html","content":"创意蚪儿随笔画廊Ray & Dream's World 创意：记录我在创业、发明上的一些灵光一现的想法。 蚪儿：是小蝌蚪专属的天地。 随笔：当我想写一些文章了就来这里吧。 画廊：是我生活中的难忘时刻收集处。 sdf"},{"path":"/social/index.html","content":"留言虫洞个人空间 人生 .. 参与项目 fastFET python data-science"},{"path":"/explore/awesome/index.html","content":"文章站点项目大佬友链主页集合 开源大佬尹寒磊技术和生活的记录空间Justin Yanghttps://lifestyle1.cn/执着_7748https://www.jianshu.com/...Woooodi目前共计 58 篇日志。枋柚梓喵喵喵？MHuiGBe Yourself, Make a Difference.Colsrch愿多年以后，我可以酌一杯清酒，烂醉如泥，梦中回到我们的曾经。ChrAlpha 的幻想乡不硬核瞎折腾小冰博客http://zfe.space/ 最近动态TODO"},{"path":"/explore/friends/index.html","content":"文章站点项目大佬友链友链 海内存知己 天涯若比邻 朋友圈动态 TODO 您可加入我的友链 通过提交我的仓库的issue加好友。具体操作如下： 第一步：新建 Issue在GitHub Issue中点击new issue, 按照模板格式填写并提交。为了提高图片加载速度，建议优化头像：打开 压缩图 上传自己的头像，将图片尺寸调整到 96px 后下载。将压缩后的图片上传到 去不图床 并使用此图片链接作为头像。第二步：添加友链并等待管理员审核您还可添加本站到您的友链中。title:友链title: JamesRayavatar: &#x27;&#x27;url: https://taddream.sitescreenshot: &#x27;&#x27;待管理员审核通过，添加了 active 标签后，回来刷新即可生效。如果您需要更新自己的友链，请直接修改 issue 内容，大约 3 分钟内生效，无需等待博客更新。如果无法修改，可以重新创建一个。"},{"path":"/explore/sites/index.html","content":"文章站点项目大佬友链站点集合收录学习网站、工具、组件、资源、API... 工具综合类工具包 UU在线工具集合站, 点击即可下载.exe文件(安全无毒)，内部集成约600种小工具 开发者武器库, 在线工具150+ 查找查看类 UU-svg, svg代码转图片 写作类 徽章生成, 如 : shields工具 先制作url，用以生成徽章图片: https://img.shields.io/badge/软件名-版本号-颜色或其代码.svg?logo=软件名&amp;logoColor=颜色 其中版本号可选，logo和logocolor参数可选，但首先要去icon库中确认库中有收录，否则需自定义logo(base64编码)。 后把徽章图片附上链接，嵌入行内，在markdown渲染器中，徽章将直接生效： （可选）最后，若.md需被博客软件(e.g. Hexo)渲染成html格式, 可能出现‘图片无法嵌入行内、图片无法附上链接’等问题，可考虑将上一步的代码手动转为html格式，放在.md中： &lt;a href=&quot;https://hexo.io/zh-cn/index.html&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/hexo-6.3.0-ff69b4.svg?logo=hexo&quot; alt=&quot;img&quot; style=&quot;display:inline-block;&quot;&gt;&lt;/a&gt; badge.fury工具特点：只针对几种语言；格式、配色固定；获取完整徽章更自动化。如pytorch的徽章： 转换代码工作参照上面。 转换类 url ↔ markdown 单向工具(主推)，双向工具 建议url最好是博客文章类的页面，如CSDN、知乎、掘金、个人博客…的文章。 获取资源的API图片 获取 unsplash.com 的图片 获取随机图片：https://source.unsplash.com/random 根据关键词获得随机图片： https://source.unsplash.com/featured/?{keyword} 留待慢慢整理电子书Flutter实战·第二版https://book.flutterchina.club/Axioshttps://axios-http.com/Socket.IOhttps://socket.io/Rust 程序设计语言 中文版https://rustwiki.org/zh-CN/book/title-page.html语义化版本https://semver.org/lang/zh-CN/labuladong 的算法小抄https://github.com/labuladong/fucking-algorithmHTTPS的工作原理https://howhttps.works/zh/中医古籍http://www.mst1739.com/yidao/yuedu.php编程相关书籍https://github.com/justjavac/free-programming-books-zh_CN移动端开发啊https://github.com/hoosin/mobile-web-favorites程序员编程技艺https://github.com/julycoding/The-Art-Of-Programming-By-July-2nd腾讯前端代码编写规范http://alloyteam.github.io/CodeGuide/逐行剖析vuejs源码https://nlrx-wjc.github.io/Learn-Vue-Source-Code/开发相关学习网站web.devhttps://web.dev/uiverse css案例https://uiverse.io/GitHub 开源库离线IP地址定位库和IP定位数据管理框架https://github.com/lionsoul2014/ip2region编程学习路径https://roadmap.sh/markdown编辑器https://imzbf.github.io/md-editor-v3/docs视频播放插件 哔哩哔哩样式https://artplayer.org/document/vue 组件库Element UIhttps://element.eleme.io/#/zh-CNElement Plushttps://element-plus.org/zh-CN/#/zh-CNAnt Design Vuehttps://antdv.com/components/overview-cnMaterial Design for Bootstrap 5 & Vue 3https://mdbootstrap.com/docs/vue/Vanthttps://vant-ui.github.io/vant/#/zh-CNVuetifyhttps://vuetifyjs.com/zh-Hans/Quasarhttps://quasar.dev/Naive UIhttps://www.naiveui.com/zh-CN/os-themeReact 组件库MUIhttps://mui.com/zh/Ant Designhttps://ant.design/index-cnArco Designhttps://arco.designcssCSS Loading效果https://loading.io/css/Tailwidcsshttps://tailwindcss.com/loadinghttps://cssloaders.github.io/daisyuihttps://daisyui.com/后端管理脚手架BuildAdminhttps://wonderful-code.gitee.io/Pure Adminhttps://yiming_chang.gitee.io/pure-admin-doc/DataV vue 支持 Vue3 + Vite 的 DataV 组件库https://datav-vue3.netlify.app/其他工具npmnpmmdnmdn字体下载编程字体下载网站百度翻译百度翻译谷歌翻译谷歌翻译Vue3项目初始模板antfu的Vue3项目初始模板vxe-table 高性能表格组件高性能表格，可以代替 antd-vue 的表格组建精灵图切图自动精灵图切图在线nginx配置在线nginx配置网站Puppeteer无头浏览器jsont 在线JSON验证和编辑在线JSON验证和编辑electron-vitehttps://cn.electron-vite.org/桌面端框架taurihttps://tauri.app/Wailshttps://wails.io/Electronhttps://www.electronjs.org/Nw.jshttps://nwjs.io/Flutter for Desktophttps://flutter.dev/multi-platform/desktop自媒体图片处理移除图片背景https://www.remove.bg/zh在线 pshttps://www.logosc.cn/online-ps免版权的高质量图库[unsplash]https://unsplash.com/矢量插画 unDrawhttps://undraw.co/illustrations头像生成https://ezshine.jnsii.com/cases/avatarbuilder/快速生成网站截图https://www.thum.io/颜色相关中国传统色http://zhongguose.com/色板materialuihttps://materialui.co/socialcolors/色板flatuicolorshttps://flatuicolors.com/palette/defo渐变色webgradientshttps://webgradients.com/渐变色webkulhttps://webkul.github.io/coolhue/colorhunthttps://colorhunt.co/颜色转换工具https://htmlcolorcodes.com/zh/colorbox色板https://colorbox.io/智能渐变工具https://mycolor.space/网页配色，可以直接预览效果https://palettemaker.com/设计相关dribbblehttps://dribbble.com/lordicon 动态iconhttps://lordicon.com/d.design 堆友https://d.design/yesicon快速查询ICON音频相关日系音乐[魔王魂]https://maou.audio/category/bgm/freemusicarchivehttps://freemusicarchive.org/homesoundcloudhttps://soundcloud.com/lakeyinspired站长工具百度统计网站访问次数统计谷歌统计谷歌网站统计在线简历制作https://www.mujicv.com/index.htmlhttps://www.mujicv.com/index.html"},{"path":"/oasis/creativity/index.html","content":"主页创意蚪儿随笔画廊创意空间记录我在创业、发明上的一些灵光一现的想法 发明 自行行李车 创业 外卖厨房直播app"},{"path":"/oasis/creativity/ivt-bike-luggage.html","content":"主页创意蚪儿随笔画廊发明：自行行李车 想制作一个可以上飞机的，自行车和行李箱的结合体。 契机人在机场，起飞还有数小时，想去周边玩耍溜达很不方便，需要一个便捷、多功能的代步工具。 现状已有类似产品： 行李箱 电动车"},{"path":"/oasis/dream-World/index.html","content":"主页创意蚪儿随笔画廊蚪蚪空间是小蝌蚪专属的天地 蚪儿你好我是磊磊"},{"path":"/oasis/gallery/index.html","content":"主页创意蚪儿随笔画廊我们的画廊是生活中的难忘时刻汇集地。 ~~ 随机 云朵"},{"path":"/oasis/essays/index.html","content":"主页创意蚪儿随笔画廊随笔集当我想写一些文章了就来这里吧 ~~ 零零散散 2023&#x2F;12&#x2F;27 蚪儿作词 仿写蚪儿如果你此刻感觉到开心不妨穿上最漂亮的裙子数十年来她都自赏着孤芳但撇见过她的人都在期待着下一次惊鸿生活小碎片"},{"title":"红树林正射影像目标检测","path":"/wiki/OD-mangrove/index.html","content":"背景介绍红树林目标检测，特点是超大分辨率的遥感数据，小目标检测 coding过程参考PaddleYOLO项目用docker来准备paddleyolo的环境 注：容器里的/paddle/用于挂载和主机通信。另外一定要加--gpus=all参数。 给"},{"path":"/wiki/awesome-proj/index.html","content":"文章站点项目大佬友链项目收集 网页截图转前端代码"},{"path":"/wiki/awesome-proj/others.html","content":"文章站点项目大佬友链项目收集 h2"},{"title":"技术碎片收集","path":"/wiki/my-notes/index.html","content":"冲浪中偶遇到的有用的小知识点，暂时用不上，且没有归档，就放在这个碎片集合里 网站建设网站的备案与申请SSL证书阿里备案的，需要买至少3个月的服务器，最便宜好像是150左右服务码：去淘宝买阿里云服务码，才两块钱一个；有了服务码就不需要买服务器了，光有服务码备案也能通过；两块钱嫖遍国内 CDN。阿里云的【数字证书管理服务 -&gt; SSL 证书】，每年可以免费领20个，我一开始也是失败，后来发现申请主站证书的时候要把 @ 和 www 解析都暂停掉才可以。筛选最近3条todo筛选评论最多的3条建议"},{"title":"debug集合","path":"/wiki/my-notes/debug集合.html","content":"跳转"},{"title":"常用代码小工具","path":"/wiki/my-notes/常用代码小工具.html","content":"写博客 在文章内放锚点这样可以让用户通过链接导航到文章内部任意位置。放锚：你想要的位置写入&lt;a name=&quot;自定义&quot;&gt;&lt;/a&gt;用锚：链接形如 http://localhost:4000/post/network/#12 读取文件import json"},{"title":"Git-SDK安装与配置","path":"/wiki/yinxiang/Git-SDK安装与配置.html","content":"发表于 2022-05-20 更新于 2022-06-09 上一级页面：index-windows 前言Git作为代码管理程序，自带一个好用的shell工具–Git Bash 但在Windows中，git发行版自带的git bash是阉割版，git sdk for windows则包含一个完整版本的git bash，并且提供了一套基本完整的集成开发环境 故此，在Windows环境下，推荐首先安装git sdk，git sdk包含了一个完整的git bash，本文将给出详细配置。 然后再通过git sdk来安装git，本文将给出安装过程 Git SDK 简介Git SDK 全称 Git for Windows SDK，是基于 MSYS2（MinGW64 + Cygwin 合体增强）的仿 Linux 环境； 安装后大约会占用 4~5 GB 的磁盘空间，但是包含了完整的仿 Linux 环境：包括常用工具，完整的 GNU Complier 链以及包管理器 pacman；基本上是一套完整的集成开发环境，所以是 SDK 此外，虽然 Git SDK 是基于 MSYS2 的，是 Git 的超集…… 但是你仍然需要安装 Git，本文将给出安装过程 建议安装 Git SDK 而不是 MSYS2，因为前者比后者好用 安装git发行版 git for windows要安装git sdk，需要先安装git，你可以去 Git for Windows 官网，点击如图按钮下载 安装 Git SDK你可以去 Git for Windows 官网，拉到最下面可以看到 Git SDK 的下载；这样下载的是一个安装器，会自动从一个仓库克隆这个程序所需要的全部文件但是下载速度感人， 下载Git for Windows SDK: Release Git for Windows SDK v1.0.8 · git-for-windows&#x2F;build-extra 安装步骤如下： 将解压后的文件放在某个位置，将这个路径记为git-sdk安装目录 安装有点慢，先设置走代理 1234# https协议设置走 HTTP 隧道代理git config --global http.proxy \"http://127.0.0.1:1080\"# 下面这条会丧失安全性git config --global https.proxy \"http://127.0.0.1:1080\" 具体其他的详情见git-连接远程服务器的代理方案 等待自动化安装过程： 如果安装过程中，报错安装失败，检查代理设置后， 手动打开C:\\git-sdk-64，显示系统隐藏文件，然后删除.git文件夹，然后手动管理员身份运行C:\\git-sdk-64下的setup-git-sdk.bat git bash with git sdk设置网络代理进行网络代理配置，详情见 index-proxy 配置环境变量将安装目录下的/cmd文件夹加入系统变量 注意：\\usr\\bin目录最好不要加到系统变量，避免与其他类似工具比如 Gow 产生冲突，所 另外一方面，要在cmd等shell中使用git，也需要配置这个环境变量 更新源和核心包修改 pacman 软件包源为国内源在 /etc/pacman.d/ 目录下有三个文件：mirrorlist.msys、mirrorlist.mingw64 和 mirrorlist.mingw32；我们可以直接在 Windows 中使用文本编辑器修改它们为国内源： 1234567891011## ## MSYS2 repository mirrorlist ## ## Primary ## msys2.org Server = http://mirrors.ustc.edu.cn/msys2/msys/$arch/ Server = http://repo.msys2.org/msys/$arch Server = http://downloads.sourceforge.net/project/msys2/REPOS/MSYS2/$arch Server = http://www2.futureware.at/~nickoe/msys2-mirror/msys/$arch/ Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/msys/$arch/ 1234567891011## ## 64-bit Mingw-w64 repository mirrorlist ## ## Primary ## msys2.org Server = http://mirrors.ustc.edu.cn/msys2/mingw/x86_64/ Server = http://repo.msys2.org/mingw/x86_64 Server = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/x86_64 Server = http://www2.futureware.at/~nickoe/msys2-mirror/x86_64/ Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/x86_64/ 1234567891011## ## 32-bit Mingw-w64 repository mirrorlist ## ## Primary ## msys2.org Server = http://mirrors.ustc.edu.cn/msys2/mingw/i686/ Server = http://repo.msys2.org/mingw/i686 Server = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/i686 Server = http://www2.futureware.at/~nickoe/msys2-mirror/i686/ Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/i686/ 注意服务器的顺序，将国内服务器放在优先的位置才能保证 pacman 优先使用它； 更新git SDKUpdating your SDK。 更新SDK需要关掉所有的GitBash窗口，以防有文件被锁住。 需要启动Windows的cmd来更新，然后进入C:\\git-sdk-64\\。 然后在此cmd窗口中执行update-via-pacman.bat。 不管有没有更新，每次总会重装git-extra。 也可以直接在文件浏览器中双击运行update-via-pacman.bat来完成更新。 还可以调用pacman -Syu来更新。过程中可能需要关掉重开git-bash，也许需要多次执行pacman -Syu。 更新核心软件包核心的软件包msys2-runtime、 bash以及pacman还可以通过pacman -Syu来一起更新，因为这些软件在编译的时候互相依赖。 要保证他们的互相依赖是正确的。 1pacman -Syu 另一可选的办法是执行执行C:\\git-sdk-64\\git-cmd来弹出一个cmd窗口，在其中执行pacman -Sy --needed msys2-runtime &amp;&amp; pacman -S --needed pacman bash。 执行C:\\git-sdk-64\\git-cmd。 更新核心运行时，更新pacman，并更新bash 123pacman -Sy --needed msys2-runtimepacman -Sy --needed pacmanpacman -Sy --needed bash 建议将msys2-runtime、bash和pacman分开来，单独升级。总之有可能会遇到比较奇怪的问题。 遇到某些错误无法更新如果遇到某些错误无法更新，那么总是可以选择下载一个新的SDK，重新安装之。过程中，你可以选择保留旧SDK中的usr/src，将其同步到新的SDK中。 也可以查看git update-git-for-windows -h。 更新pacman源运行git sdk 更新源信息，首次更新可能需要重启； 1pacman -Syu pacman -Sy可以确保软件包最新。pacman -Syu将所有软件包升级到最新。 使用pacman安装gitwindows下通过git sdk来安装git 1pacman -S git git是最常用的代码管理系统，git的使用见git-安装-配置 卸载git 发行版在Windows中，git发行版自带的git bash是阉割版，git sdk for windows则包含一个完整版本的git bash，并且提供了一套基本完整的集成开发环境，还可以通过git sdk来安装git 此时可以卸载系统中原本的git 发行版， 进入Git for Windows 官网， 如图所示，你点击图中按钮下载的就是git发行版，现在已经可以卸载这个发行版了 安装常用包可以通过pacman -S &lt;package-name&gt;安装软件包 安装git、wget 12pacman -S wgetpacman -S git pacman没有自带的perl。安装perl 1pacman -S perl 为git bash添加 sudo 命令:gsudo-sudo 常用命令Package management Git for Windows基于MSYS2。MSYS2和MSYS1相比，引进了包管理器msys。 更多参考The difference between MINGW and MSYS2 可以通过pacman -S &lt;package-name&gt;安装软件包。-Sy可以确保软件包最新。pacman -Syu将所有软件包升级到最新。 删除软件包pacman -R &lt;package-name&gt; 列举软件包pacman -Q；查询软件包内容pacman -Ql &lt;package-name&gt;；查询文件所属的软件包pacman -Qo &lt;file-name&gt;。 仓库Git for windows有三个相关的pacman仓库 https://github.com/git-for-windows/build-extra https://github.com/git-for-windows/MINGW-packages https://github.com/git-for-windows/MSYS2-packages 常见问题Git-Bash的文件映射 参考、引用、致谢在 Windows 10 中使用 zsh 作为默认终端 - 七海の参考書 (shiraha.cn) 在 Windows 10 中使用 zsh 作为默认终端 - 七海の参考書 (shiraha.cn) Windows Terminal美化（oh-my-posh3） - 知乎 (zhihu.com) Git for Windows的编译环境 | Marvin’s Blog【程式人生】 (marvinsblog.net)"},{"title":"文章收录","path":"/wiki/yinxiang/index.html","content":"Git-SDK安装与配置"}]